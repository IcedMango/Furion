<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Validation</name>
    </assembly>
    <members>
        <member name="T:System.ComponentModel.DataAnnotations.AgeAttribute">
            <summary>
            年龄验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AgeAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AgeAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ColorAttribute">
            <summary>
            颜色值验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ColorAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ColorAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.IMEIAttribute">
            <summary>
            手机机身码验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IMEIAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IMEIAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.TrainNumberAttribute">
            <summary>
            火车车次验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TrainNumberAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TrainNumberAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PositiveRegex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PositiveRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PositiveRegex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PositiveRegex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PositiveRegex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PositiveRegex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PositiveRegex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PositiveRegex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PositiveRegex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PositiveRegex_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_9">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_9.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_10">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StrictRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StrictRegex_10.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_10.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_10.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_10.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_10.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_10.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_10.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_10.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_11">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_11.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_12">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_12.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_13">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_13.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_14">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_14.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_14.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_14.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_14.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_14.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_14.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_14.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_14.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowChineseRegex_15">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AllowChineseRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AllowChineseRegex_15.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowChineseRegex_15.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowChineseRegex_15.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowChineseRegex_15.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AllowChineseRegex_15.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowChineseRegex_15.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowChineseRegex_15.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AllowChineseRegex_15.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_16">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_16.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_16.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_16.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_16.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_16.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_16.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_16.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_16.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_17">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StrictRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StrictRegex_17.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_17.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_17.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_17.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_17.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_17.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_17.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_17.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_18">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_18.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_18.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_18.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_18.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_18.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_18.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_18.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_18.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_19">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_19.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_19.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_19.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_19.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_19.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_19.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_19.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_19.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_20">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_20.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_20.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_20.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_20.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_20.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_20.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_20.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_20.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_21">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_21.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_21.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_21.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_21.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_21.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_21.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_21.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_21.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_22">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_22.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_22.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_22.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_22.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_22.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_22.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_22.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_22.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_23">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_23.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_23.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_23.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_23.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_23.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_23.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_23.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_23.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_24">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_24.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_24.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_24.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_24.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_24.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_24.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_24.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_24.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_25">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_25.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_25.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_25.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_25.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_25.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_25.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_25.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_25.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_26">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_26.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_26.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_26.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_26.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_26.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_26.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_26.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_26.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_27">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_27.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_27.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_27.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_27.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_27.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_27.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_27.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_27.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_28">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_28.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_28.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_28.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_28.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_28.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_28.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_28.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_28.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_29">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_29.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_29.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_29.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_29.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_29.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_29.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_29.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_29.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_30">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_30.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_30.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_30.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_30.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_30.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_30.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_30.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_30.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_31">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_31.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_31.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_31.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_31.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_31.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_31.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_31.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_31.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_32">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_32.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_32.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_32.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_32.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_32.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_32.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_32.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_32.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_33">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_33.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_33.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_33.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_33.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_33.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_33.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_33.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_33.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_34">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StrictRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StrictRegex_34.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_34.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_34.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_34.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_34.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_34.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_34.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_34.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_35">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_35.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_35.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_35.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_35.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_35.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_35.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_35.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_35.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_36">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_36.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_36.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_36.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_36.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_36.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_36.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_36.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_36.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_37">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_37.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_37.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_37.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_37.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_37.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_37.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_37.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_37.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_38">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_38.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_38.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_38.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_38.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_38.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_38.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_38.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_38.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_39">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_39.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_39.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_39.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_39.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_39.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_39.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_39.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_39.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_40">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_40.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_40.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_40.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_40.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_40.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_40.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_40.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_40.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_41">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_41.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_41.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_41.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_41.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_41.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_41.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_41.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_41.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_42">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_42.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_42.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_42.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_42.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_42.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_42.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_42.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_42.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_43">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_43.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_43.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_43.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_43.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_43.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_43.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_43.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_43.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_44">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_44.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_44.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_44.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_44.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_44.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_44.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_44.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_44.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_45">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_45.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_45.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_45.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_45.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_45.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_45.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_45.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_45.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.WithPortRegex_46">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the WithPortRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.WithPortRegex_46.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WithPortRegex_46.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.WithPortRegex_46.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WithPortRegex_46.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.WithPortRegex_46.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WithPortRegex_46.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WithPortRegex_46.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.WithPortRegex_46.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_47">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StrictRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StrictRegex_47.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_47.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_47.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_47.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StrictRegex_47.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_47.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_47.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StrictRegex_47.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_48">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_48.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_48.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_48.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_48.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_48.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_48.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_48.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_48.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_49">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_49.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_49.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_49.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_49.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_49.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_49.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_49.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_49.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_50">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PlaceholderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PlaceholderRegex_50.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_50.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_50.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_50.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_50.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_50.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_50.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_50.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_51">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_51.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_51.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_51.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_51.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_51.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_51.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_51.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_51.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfNonAsciiOrAny_811E976D391C1107DF682D1C2B5DAE374AA2F117F0798F620D1415139FDB946A(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a character in the set [\u4E0A\u4E91\u5185\u5317\u53F0\u5409\u56DB\u5929\u5B81\u5B89\u5C71\u5E7F\u65B0\u6C5F\u6CB3\u6D59\u6D77\u6E56\u6FB3\u7518\u798F\u897F\u8D35\u8FBD\u91CD\u9655\u9752\u9999\u9ED1].</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsBoundary(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>Determines whether the specified index is a boundary.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiHexDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFabcdef".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLetters">
            <summary>Supports searching for characters in or not in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_34020000000000000000">
            <summary>Supports searching for characters in or not in "2459".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_7B0400800100004000000000">
            <summary>Supports searching for characters in or not in " !#$%&amp;*?@^".</summary>
        </member>
        <member name="T:Furion.Validation.ValidatorRelationship">
            <summary>
            验证器关系
            </summary>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.Default">
            <summary>
            缺省值
            </summary>
            <remarks><seealso cref="F:Furion.Validation.ValidatorRelationship.And"/></remarks>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="T:Furion.Validation.ValidatorBaseExtensions">
            <summary>
            <see cref="T:Furion.Validation.ValidatorBase"/> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBaseExtensions.WithErrorMessage``1(``0,System.String)">
            <inheritdoc cref="M:Furion.Validation.ValidatorBase.WithErrorMessage(System.String)" />
        </member>
        <member name="T:Furion.Validation.Resources.Strings">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.AgeValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid age format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.BankCardNumberValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid bank card number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.Base64Validator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid base64 format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.BooleanValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid value that can be converted to a boolean type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.ChineseProvinceValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid chinese province. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.FullDayClockTimeValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid full day clock time format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.GreenPlateNumberValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid green plate number format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.HalfDayClockTimeValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid half day clock time format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.NumberPlateValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid number plate format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.RequiredValidator_Invalid">
            <summary>
              查找类似 The {0} field is required. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.StandardPlateNumberValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid standard plate number format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.ValidatorBase_Invalid">
            <summary>
              查找类似 The field is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Furion.Validation.AgeValidator">
            <summary>
            年龄（0-120）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.AgeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.AgeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.AgeValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 4 alternative expressions.<br/>
                ○ Match '0' through '9'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [1-9].<br/>
                    ○ Match '0' through '9' atomically, optionally.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '1'.<br/>
                    ○ Match a character in the set [01].<br/>
                    ○ Match '0' through '9'.<br/>
                ○ Match the string "120".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.BankCardNumberValidator">
            <summary>
            银行卡号验证器
            </summary>
            <remarks>
            <see href="https://pay.weixin.qq.com/wiki/doc/api/xiaowei.php?chapter=22_1">银行卡号对照表</see>
            </remarks>
        </member>
        <member name="M:Furion.Validation.BankCardNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.BankCardNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.BankCardNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9].<br/>
            ○ Match a Unicode digit atomically at least 9 and at most 29 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.Base64Validator">
            <summary>
            Base64 字符串验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.Base64Validator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.Base64Validator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.Base64Validator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match a character in the set [Dd].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match ':'.<br/>
            ○ Optional (greedy).<br/>
                ○ Match a character in the set [A-Za-z\u212A] atomically at least once.<br/>
                ○ Match '/'.<br/>
                ○ Match a character in the set [+-.0-9A-Za-z\u212A] greedily at least once.<br/>
                ○ Optional (greedy).<br/>
                    ○ Match ';'.<br/>
                    ○ Match a character in the set [-A-Za-z\u212A] atomically at least once.<br/>
                    ○ Match '='.<br/>
                    ○ Match a character in the set [-0-9A-Za-z\u212A] greedily at least once.<br/>
            ○ Optional (greedy).<br/>
                ○ Match ';'.<br/>
                ○ Match a character in the set [Bb].<br/>
                ○ Match a character in the set [Aa].<br/>
                ○ Match a character in the set [Ss].<br/>
                ○ Match a character in the set [Ee].<br/>
                ○ Match the string "64".<br/>
            ○ Match ','.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [!$-;=?-Z_a-z~\u212A\s] lazily any number of times.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.BooleanValidator">
            <summary>
            布尔值验证器
            </summary>
        </member>
        <member name="F:Furion.Validation.BooleanValidator.boolStrings">
            <summary>
            bool 类型字符串集合
            </summary>
        </member>
        <member name="M:Furion.Validation.BooleanValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.BooleanValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.ChineseNameValidator">
            <summary>
            中文姓名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [\u00B7\u4E00-\u9FA5] atomically at least 2 and at most 16 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ChineseProvinceValidator">
            <summary>
            中国省份验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseProvinceValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseProvinceValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ChineseProvinceValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 34 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match the string "浙江".<br/>
                ○ Match the string "上海".<br/>
                ○ Match the string "北京".<br/>
                ○ Match the string "天津".<br/>
                ○ Match the string "重庆".<br/>
                ○ Match the string "黑龙江".<br/>
                ○ Match the string "吉林".<br/>
                ○ Match the string "辽宁".<br/>
                ○ Match the string "内蒙古".<br/>
                ○ Match the string "河北".<br/>
                ○ Match the string "河南".<br/>
                ○ Match the string "新疆".<br/>
                ○ Match the string "甘肃".<br/>
                ○ Match the string "青海".<br/>
                ○ Match the string "陕西".<br/>
                ○ Match the string "宁夏".<br/>
                ○ Match the string "山东".<br/>
                ○ Match the string "山西".<br/>
                ○ Match the string "安徽".<br/>
                ○ Match the string "湖北".<br/>
                ○ Match the string "湖南".<br/>
                ○ Match the string "江苏".<br/>
                ○ Match the string "江西".<br/>
                ○ Match the string "四川".<br/>
                ○ Match the string "贵州".<br/>
                ○ Match the string "云南".<br/>
                ○ Match the string "广西".<br/>
                ○ Match the string "广东".<br/>
                ○ Match the string "西藏".<br/>
                ○ Match the string "福建".<br/>
                ○ Match the string "台湾".<br/>
                ○ Match the string "海南".<br/>
                ○ Match the string "香港".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "澳门".<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ChineseValidator">
            <summary>
            中文/汉字验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ChineseValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 7 alternative expressions.<br/>
                    ○ Match a character in the set [\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879].<br/>
                        ○ Match a character in the set [\uDC00-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud869'.<br/>
                        ○ Match a character in the set [\uDC00-\uDED6\uDF00-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud86d'.<br/>
                        ○ Match a character in the set [\uDC00-\uDF34\uDF40-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud86e'.<br/>
                        ○ Match a character in the set [\uDC00-\uDC1D\uDC20-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud873'.<br/>
                        ○ Match a character in the set [\uDC00-\uDEA1\uDEB0-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud87a'.<br/>
                        ○ Match a character in the set [\uDC00-\uDFE0].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ColorValidator">
            <summary>
            颜色验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ColorValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ColorValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ColorValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 3 alternative expressions, atomically.<br/>
                ○ 1st capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '#'.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 6 times.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 3 times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match '('.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 5th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 6th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ')'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 7th capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match '('.<br/>
                    ○ 8th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 9th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 10th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 11th capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match an empty string.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match any character other than '\n'.<br/>
                                        ○ Match '0'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '0'.<br/>
                                ○ Match any character other than '\n'.<br/>
                                ○ Match '0' through '9'.<br/>
                    ○ Match ')'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.CompositeValidator">
            <summary>
            组合验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.CompositeValidator.#ctor(System.Collections.Generic.List{Furion.Validation.ValidatorBase})">
            <summary>
            构造函数
            </summary>
            <param name="validators">验证器集合</param>
        </member>
        <member name="M:Furion.Validation.CompositeValidator.#ctor(System.Collections.Generic.List{Furion.Validation.ValidatorBase},Furion.Validation.ValidatorRelationship)">
            <summary>
            构造函数
            </summary>
            <param name="validators">验证器集合</param>
            <param name="relationship"><see cref="T:Furion.Validation.ValidatorRelationship"/></param>
        </member>
        <member name="P:Furion.Validation.CompositeValidator.ValidatorCollection">
            <summary>
            验证器集合
            </summary>
        </member>
        <member name="P:Furion.Validation.CompositeValidator.Relationship">
            <inheritdoc cref="T:Furion.Validation.ValidatorRelationship" />
        </member>
        <member name="M:Furion.Validation.CompositeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.CurrencyValidator">
            <summary>
            数字/货币金额验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.CurrencyValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.CurrencyValidator.AllowNegative">
            <summary>
            允许负数
            </summary>
        </member>
        <member name="M:Furion.Validation.CurrencyValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.CurrencyValidator.PositiveRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 3 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [1-9].<br/>
                    ○ Optional (greedy).<br/>
                        ○ 1st capture group.<br/>
                            ○ Match '0' through '9' greedily at least once.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match '.'.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 2 times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '0'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '0' through '9'.<br/>
                    ○ Match '.'.<br/>
                    ○ Match '0' through '9' atomically at least 1 and at most 2 times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.CurrencyValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '-' atomically, optionally.<br/>
            ○ Match a Unicode digit greedily at least once.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ 1st capture group.<br/>
                    ○ Match ','.<br/>
                    ○ Match a Unicode digit exactly 3 times.<br/>
            ○ Optional (greedy).<br/>
                ○ 2nd capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.CustomValidator`1">
            <summary>
            自定义验证器
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="M:Furion.Validation.CustomValidator`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            构造函数
            </summary>
            <param name="validatorAccessor">验证访问器</param>
        </member>
        <member name="P:Furion.Validation.CustomValidator`1.ValidatorAccessor">
            <summary>
            验证访问器
            </summary>
        </member>
        <member name="M:Furion.Validation.CustomValidator`1.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.CustomValidator`1.WithErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.DateTimeValidator">
            <summary>
            日期时间验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.DateTimeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.DateTimeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.DateTimeValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit exactly 4 times.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [-/:].<br/>
            ○ 2nd capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a character in the set [0-2].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match a character in the set [1-9].<br/>
            ○ Match the same text as matched by the 1st capture group.<br/>
            ○ 3rd capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match a character in the set [1-9].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [12].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match the string "30".<br/>
                    ○ Match the string "31".<br/>
            ○ Match ' '.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [01].<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '2'.<br/>
                    ○ Match a character in the set [0-3].<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.DateValidator">
            <summary>
            日期验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.DateValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.DateValidator.Strict">
            <summary>
            严格模式
            </summary>
        </member>
        <member name="M:Furion.Validation.DateValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.DateValidator.StrictRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ 1st capture group.<br/>
                        ○ 2nd capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' through '9' exactly 3 times.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' through '9' exactly 2 times.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                    ○ Match '0' through '9'.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '0' through '9'.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                    ○ Match '0' through '9' exactly 2 times.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match a character in the set [1-9].<br/>
                                    ○ Match '0' through '9' exactly 3 times.<br/>
                        ○ Match '-'.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 3 alternative expressions, atomically.<br/>
                                ○ 4th capture group.<br/>
                                    ○ 5th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                    ○ Match '-'.<br/>
                                    ○ 6th capture group.<br/>
                                        ○ Match with 3 alternative expressions, atomically.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match '0' through '9'.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '3'.<br/>
                                                ○ Match a character in the set [01].<br/>
                                ○ 7th capture group.<br/>
                                    ○ 8th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [469].<br/>
                                            ○ Match the string "11".<br/>
                                    ○ Match '-'.<br/>
                                    ○ 9th capture group.<br/>
                                        ○ Match with 3 alternative expressions, atomically.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match '0' through '9'.<br/>
                                            ○ Match the string "30".<br/>
                                ○ 10th capture group.<br/>
                                    ○ Match the string "02-".<br/>
                                    ○ 11th capture group.<br/>
                                        ○ Match with 3 alternative expressions, atomically.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match '0' through '9'.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ 12th capture group.<br/>
                        ○ 13th capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 14th capture group.<br/>
                                        ○ Match '0' through '9' exactly 2 times.<br/>
                                    ○ 15th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                ○ 16th capture group.<br/>
                                    ○ 17th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [48].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [3579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                    ○ Match the string "00".<br/>
                        ○ Match the string "-02-29".<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.DateValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            ○ 1st capture group.<br/>
                ○ Match '-'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a character in the set [0-2].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match a character in the set [1-9].<br/>
            ○ Match the same text as matched by the 1st capture group.<br/>
            ○ 3rd capture group.<br/>
                ○ Match with 4 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0' atomically, optionally.<br/>
                        ○ Match a character in the set [1-9].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [12].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match the string "30".<br/>
                    ○ Match the string "31".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.DomainValidator">
            <summary>
            域名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.DomainValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.DomainValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.DomainValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ 1st capture group.<br/>
                    ○ Match a character in the set [-0-9A-Za-z] atomically at least once.<br/>
                    ○ Match '.'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a character in the set [A-Za-z] atomically at least twice.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.Ed2kValidator">
            <summary>
            ed2k 链接验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.Ed2kValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.Ed2kValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.Ed2kValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "ed2k://|file|".<br/>
            ○ Match a character other than '\n' greedily at least once.<br/>
            ○ Match the string "|/".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.EmailValidator">
            <summary>
            电子邮箱验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.EmailValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.EmailValidator.AllowChinese">
            <summary>
            允许中文
            </summary>
        </member>
        <member name="M:Furion.Validation.EmailValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.EmailValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Za-z\u4E00-\u9FA5] atomically at least once.<br/>
            ○ Match '@'.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically at least once.<br/>
            ○ Loop greedily at least once.<br/>
                ○ 1st capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a character in the set [-0-9A-Z_a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.EmailValidator.AllowChineseRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match a character in the set [^"(),.:-&lt;&gt;@[-]\s] greedily at least once.<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ 3rd capture group.<br/>
                                ○ Match '.'.<br/>
                                ○ Match a character in the set [^"(),.:-&lt;&gt;@[-]\s] atomically at least once.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match '"'.<br/>
                        ○ Match a character other than '\n' greedily at least once.<br/>
                        ○ Match '"'.<br/>
            ○ Match '@'.<br/>
            ○ 5th capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 6th capture group.<br/>
                        ○ Match '['.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
                        ○ Match ']'.<br/>
                    ○ 7th capture group.<br/>
                        ○ Loop greedily at least once.<br/>
                            ○ 8th capture group.<br/>
                                ○ Match a character in the set [-0-9A-Za-z] atomically at least once.<br/>
                                ○ Match '.'.<br/>
                        ○ Match a character in the set [A-Za-z] atomically at least twice.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.EndsWithValidator">
            <summary>
            字符串结尾验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.EndsWithValidator.#ctor(System.String,System.StringComparison)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索的值</param>
            <param name="comparison"><see cref="T:System.StringComparison"/></param>
        </member>
        <member name="P:Furion.Validation.EndsWithValidator.Value">
            <summary>
            检索的值
            </summary>
        </member>
        <member name="P:Furion.Validation.EndsWithValidator.Comparison">
            <inheritdoc cref="T:System.StringComparison"/>
        </member>
        <member name="M:Furion.Validation.EndsWithValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.EnglishNameValidator">
            <summary>
            英文姓名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.EnglishNameValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.EnglishNameValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.EnglishNameValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match if at the beginning of the string.<br/>
                ○ Match a character in the set [A-Za-z].<br/>
                ○ Match a character in the set [A-Za-z\s] greedily at most 20 times.<br/>
                ○ Match a character in the set [A-Za-z].<br/>
                ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.FloatNumberValidator">
            <summary>
            浮点数验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.FloatNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.FloatNumberValidator.Strict">
            <summary>
            严格模式
            </summary>
        </member>
        <member name="M:Furion.Validation.FloatNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.FloatNumberValidator.StrictRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '-' atomically, optionally.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a Unicode digit atomically any number of times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '-' atomically, optionally.<br/>
                        ○ Match the string "0.".<br/>
                        ○ Match a Unicode digit greedily any number of times.<br/>
                        ○ Match a character in the set [1-9].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.FloatNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '-' atomically, optionally.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a Unicode digit atomically any number of times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '-' atomically, optionally.<br/>
                        ○ Match the string "0.".<br/>
                        ○ Match a Unicode digit greedily any number of times.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a Unicode digit atomically any number of times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "0.".<br/>
                        ○ Match '0' atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.FullDayClockTimeValidator">
            <summary>
            24 小时制时间（HH:mm:ss）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.FullDayClockTimeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.FullDayClockTimeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.FullDayClockTimeValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [01].<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '2'.<br/>
                    ○ Match a character in the set [0-3].<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.GreenPlateNumberValidator">
            <summary>
            新能源车牌号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.GreenPlateNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.GreenPlateNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.GreenPlateNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [\u4E91\u4EAC\u4F7F\u5180\u5409\u5B81\u5DDD\u65B0\u664B\u6842\u6CAA\u6D25\u6D59\u6E1D\u6E58\u743C\u7518\u7696\u7CA4\u82CF\u8499\u85CF\u8C6B\u8D35\u8D63\u8FBD\u9102\u95FD\u9655\u9752\u9886\u9C81\u9ED1].<br/>
            ○ Match a character in the set [A-HJ-NP-Z].<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ 1st capture group.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ 2nd capture group.<br/>
                            ○ Match a Unicode digit exactly 5 times.<br/>
                            ○ Match a character in the set [A-HJK].<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match a character in the set [A-HJK].<br/>
                            ○ Match a character in the set [0-9A-HJ-NP-Z].<br/>
                            ○ Match '0' through '9' exactly 4 times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [0-9A-HJ-NP-Z] exactly 4 times.<br/>
                    ○ Match a character in the set [0-9A-HJ-NP-Z\u5B66\u6302\u6E2F\u6FB3\u8B66].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.GuidUuidValidator">
            <summary>
            GUID/UUID 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.GuidUuidValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.GuidUuidValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.GuidUuidValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
            ○ Loop exactly 4 times.<br/>
                ○ Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
                ○ Match '-'.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 12 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.HalfDayClockTimeValidator">
            <summary>
            12 小时制时间（hh:mm:ss）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.HalfDayClockTimeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.HalfDayClockTimeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.HalfDayClockTimeValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '1'.<br/>
                    ○ Match a character in the set [0-2].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '0' atomically, optionally.<br/>
                    ○ Match a character in the set [1-9].<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IDNumberValidator">
            <summary>
            身份证号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IDNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IDNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IDNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit exactly 6 times.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ 4th capture group.<br/>
                                    ○ 5th capture group.<br/>
                                        ○ 6th capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match the string "19".<br/>
                                                ○ Match the string "20".<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 7th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-2].<br/>
                                    ○ 8th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "30".<br/>
                                ○ 9th capture group.<br/>
                                    ○ 10th capture group.<br/>
                                        ○ 11th capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match the string "19".<br/>
                                                ○ Match the string "20".<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 12th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                    ○ Match the string "31".<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 13th capture group.<br/>
                                        ○ 14th capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match the string "19".<br/>
                                                ○ Match the string "20".<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ Match the string "02".<br/>
                                    ○ 15th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                                ○ 16th capture group.<br/>
                                    ○ 17th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ 18th capture group.<br/>
                                                ○ 19th capture group.<br/>
                                                    ○ Match with 2 alternative expressions.<br/>
                                                        ○ Match the string "19".<br/>
                                                        ○ Match the string "20".<br/>
                                                ○ 20th capture group.<br/>
                                                    ○ Match with 3 alternative expressions.<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match a character in the set [13579].<br/>
                                                            ○ Match a character in the set [26].<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match a character in the set [2468].<br/>
                                                            ○ Match a character in the set [048].<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match '0'.<br/>
                                                            ○ Match a character in the set [48].<br/>
                                            ○ 21st capture group.<br/>
                                                ○ Match the string "2000".<br/>
                                    ○ Match the string "0229".<br/>
                        ○ Match a Unicode digit exactly 3 times.<br/>
                    ○ 22nd capture group.<br/>
                        ○ 23rd capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ 24th capture group.<br/>
                                    ○ 25th capture group.<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 26th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-2].<br/>
                                    ○ 27th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "30".<br/>
                                ○ 28th capture group.<br/>
                                    ○ 29th capture group.<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 30th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                    ○ Match the string "31".<br/>
                                ○ 31st capture group.<br/>
                                    ○ 32nd capture group.<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ Match the string "02".<br/>
                                    ○ 33rd capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                                ○ 34th capture group.<br/>
                                    ○ 35th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [048].<br/>
                                    ○ Match the string "0229".<br/>
                        ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 36th capture group.<br/>
                ○ Match a character in the set [Xx\d].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IMEIValidator">
            <summary>
            手机机身码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IMEIValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IMEIValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IMEIValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least 15 and at most 17 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IntegerValidator">
            <summary>
            整数验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IntegerValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IntegerValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IntegerValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match '0'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '-' atomically, optionally.<br/>
                    ○ Match a character in the set [1-9].<br/>
                    ○ Match a Unicode digit atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IPv4Validator">
            <summary>
            IPv4 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IPv4Validator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IPv4Validator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IPv4Validator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop exactly 3 times.<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-9].<br/>
                                ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match a Unicode digit exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                    ○ Match '.'.<br/>
            ○ 3rd capture group.<br/>
                ○ Match with 5 alternative expressions.<br/>
                    ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match a character in the set [0-4].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "25".<br/>
                        ○ Match a character in the set [0-5].<br/>
            ○ Optional (greedy).<br/>
                ○ Match ':'.<br/>
                ○ Match with 7 alternative expressions.<br/>
                    ○ Match '0' through '9'.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match '0' through '9' greedily at least 1 and at most 3 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-5].<br/>
                        ○ Match '0' through '9' exactly 4 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '6'.<br/>
                        ○ Match a character in the set [0-4].<br/>
                        ○ Match '0' through '9' exactly 3 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "65".<br/>
                        ○ Match a character in the set [0-4].<br/>
                        ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "655".<br/>
                        ○ Match a character in the set [0-2].<br/>
                        ○ Match '0' through '9'.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "6553".<br/>
                        ○ Match a character in the set [0-5].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IPv6Validator">
            <summary>
            IPv6 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IPv6Validator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IPv6Validator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IPv6Validator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions, atomically.<br/>
                ○ 1st capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match with 12 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Loop exactly 7 times.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 2nd capture group.<br/>
                            ○ Loop exactly 6 times.<br/>
                                ○ 3rd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 4th capture group.<br/>
                            ○ Loop exactly 5 times.<br/>
                                ○ 5th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Optional (greedy).<br/>
                                ○ 6th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 7th capture group.<br/>
                            ○ Loop exactly 4 times.<br/>
                                ○ 8th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 2 times.<br/>
                                ○ 9th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 10th capture group.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 11th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 3 times.<br/>
                                ○ 12th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 13th capture group.<br/>
                            ○ Loop exactly 2 times.<br/>
                                ○ 14th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 4 times.<br/>
                                ○ 15th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 16th capture group.<br/>
                            ○ Loop exactly 6 times.<br/>
                                ○ 17th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 18th capture group.<br/>
                                    ○ 19th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 20th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 21st capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 22nd capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 23rd capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 24th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 25th capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 26th capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 27th capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 28th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 29th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 30th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 31st capture group.<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 32nd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 33rd capture group.<br/>
                                    ○ 34th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 35th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 36th capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 37th capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 38th capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 39th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 40th capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 41st capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 42nd capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 43rd capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 44th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 45th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 46th capture group.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 47th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 48th capture group.<br/>
                                    ○ 49th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 50th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 51st capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 52nd capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 53rd capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 54th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 55th capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 56th capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 57th capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 58th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 59th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 60th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 61st capture group.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 62nd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 63rd capture group.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 6 times.<br/>
                                ○ 64th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 65th capture group.<br/>
                            ○ Loop greedily at least 1 and at most 7 times.<br/>
                                ○ 66th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 67th capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '['.<br/>
                    ○ Match with 12 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Loop exactly 7 times.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 68th capture group.<br/>
                            ○ Loop exactly 6 times.<br/>
                                ○ 69th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 70th capture group.<br/>
                            ○ Loop exactly 5 times.<br/>
                                ○ 71st capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Optional (greedy).<br/>
                                ○ 72nd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 73rd capture group.<br/>
                            ○ Loop exactly 4 times.<br/>
                                ○ 74th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 2 times.<br/>
                                ○ 75th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 76th capture group.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 77th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 3 times.<br/>
                                ○ 78th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 79th capture group.<br/>
                            ○ Loop exactly 2 times.<br/>
                                ○ 80th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 4 times.<br/>
                                ○ 81st capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 82nd capture group.<br/>
                            ○ Loop exactly 6 times.<br/>
                                ○ 83rd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 84th capture group.<br/>
                                    ○ 85th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 86th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 87th capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 88th capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 89th capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 90th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 91st capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 92nd capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 93rd capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 94th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 95th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 96th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 97th capture group.<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 98th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 99th capture group.<br/>
                                    ○ 100th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 101st capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 102nd capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 103rd capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 104th capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 105th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 106th capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 107th capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 108th capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 109th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 110th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 111th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 112th capture group.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 113th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 114th capture group.<br/>
                                    ○ 115th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 116th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 117th capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 118th capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 119th capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 120th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 121st capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 122nd capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 123rd capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 124th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 125th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 126th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 127th capture group.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 128th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 129th capture group.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 6 times.<br/>
                                ○ 130th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 131st capture group.<br/>
                            ○ Loop greedily at least 1 and at most 7 times.<br/>
                                ○ 132nd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                    ○ Match ']'.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match ':'.<br/>
                        ○ Match with 7 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-9].<br/>
                                ○ Match '0' through '9' greedily at least 1 and at most 3 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-5].<br/>
                                ○ Match '0' through '9' exactly 4 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '6'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9' exactly 3 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "65".<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "655".<br/>
                                ○ Match a character in the set [0-2].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "6553".<br/>
                                ○ Match a character in the set [0-5].<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.MacAddressValidator">
            <summary>
            MAC 地址验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.MacAddressValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.MacAddressValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.MacAddressValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Loop exactly 5 times.<br/>
                            ○ 3rd capture group.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                ○ Match ':'.<br/>
                    ○ 4th capture group.<br/>
                        ○ Loop exactly 5 times.<br/>
                            ○ 5th capture group.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                ○ Match '-'.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.MagnetValidator">
            <summary>
            磁力链接验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.MagnetValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.MagnetValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.MagnetValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "magnet:?xt=urn:btih:".<br/>
            ○ Match a character in the set [0-9A-Fa-f] greedily at least 40 times.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.MD5Validator">
            <summary>
            MD5 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.MD5Validator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.MD5Validator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.MD5Validator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 32 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.NegativeIntegerValidator">
            <summary>
            负整数验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.NegativeIntegerValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.NegativeIntegerValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.NegativeIntegerValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '-'.<br/>
            ○ Match a character in the set [1-9].<br/>
            ○ Match a Unicode digit atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.NotEmptyValidator">
            <summary>
            非空验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.NotEmptyValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.NotEmptyValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.NumberPlateValidator">
            <summary>
            车牌号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.NumberPlateValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.NumberPlateValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.NumberPlateValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [\u4E91\u4EAC\u4F7F\u5180\u5409\u5B81\u5DDD\u65B0\u664B\u6842\u6CAA\u6D25\u6D59\u6E1D\u6E58\u743C\u7518\u7696\u7CA4\u82CF\u8499\u85CF\u8C6B\u8D35\u8D63\u8FBD\u9102\u95FD\u9655\u9752\u9886\u9C81\u9ED1].<br/>
            ○ Match a character in the set [A-HJ-NP-Z].<br/>
            ○ Match a character in the set [0-9A-HJ-NP-Z] greedily at least 4 and at most 5 times.<br/>
            ○ Match a character in the set [0-9A-HJ-NP-Z\u5B66\u6302\u6E2F\u6FB3\u8B66].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ObjectAnnotationValidator">
            <summary>
            对象注解（特性）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator.WithErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.ObjectAnnotationValidator`1">
            <summary>
            对象注解（特性）验证器
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator`1.IsValid(`0)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator`1.GetValidationResults(`0,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator`1.WithErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator`1.TryValidate(`0,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            验证逻辑
            </summary>
            <param name="value">待验证的值</param>
            <param name="validationResults"><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> 集合</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.Validation.PassportValidator">
            <summary>
            护照验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PassportValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.PassportValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PassportValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions, atomically.<br/>
                ○ 1st capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [DEGHKPSdeghkps].<br/>
                    ○ Match a Unicode digit exactly 8 times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 2nd capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ 4th capture group.<br/>
                                ○ Match a character in the set [Ee].<br/>
                                ○ Match a character in the set [A-Fa-f].<br/>
                            ○ 5th capture group.<br/>
                                ○ Match a character in the set [DPSdps].<br/>
                                ○ Match a character in the set [Ee].<br/>
                            ○ 6th capture group.<br/>
                                ○ Match a character in the set [Kk].<br/>
                                ○ Match a character in the set [Jj].<br/>
                            ○ 7th capture group.<br/>
                                ○ Match a character in the set [Mm].<br/>
                                ○ Match a character in the set [Aa].<br/>
                            ○ 8th capture group.<br/>
                                ○ Match '1'.<br/>
                                ○ Match a character in the set [45].<br/>
                    ○ Match a Unicode digit exactly 7 times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.PhoneNumberValidator">
            <summary>
            手机号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.PhoneNumberValidator.Strict">
            <summary>
            严格模式
            </summary>
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.StrictRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match '+'.<br/>
                    ○ Match the string "00".<br/>
                ○ Match the string "86".<br/>
            ○ Match '1'.<br/>
            ○ Match with 7 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '3'.<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '4'.<br/>
                    ○ Match a character in the set [5-79].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '5'.<br/>
                    ○ Match a character in the set [0-35-9].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '6'.<br/>
                    ○ Match a character in the set [5-7].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '7'.<br/>
                    ○ Match a character in the set [0-8].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '8'.<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '9'.<br/>
                    ○ Match a character in the set [189].<br/>
            ○ Match a Unicode digit exactly 8 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match '+'.<br/>
                    ○ Match the string "00".<br/>
                ○ Match the string "86".<br/>
            ○ Match '1'.<br/>
            ○ Match a character in the set [3-9].<br/>
            ○ Match a Unicode digit exactly 9 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.PositiveIntegerValidator">
            <summary>
            正整数验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PositiveIntegerValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.PositiveIntegerValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PositiveIntegerValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '+' atomically, optionally.<br/>
            ○ Match a character in the set [1-9].<br/>
            ○ Match a Unicode digit atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.PostalCodeValidator">
            <summary>
            邮政编码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 9 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a character in the set [0-356].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match a character in the set [0-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '3'.<br/>
                        ○ Match a character in the set [0-6].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '4'.<br/>
                        ○ Match a character in the set [0-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '5'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '6'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '7'.<br/>
                        ○ Match a character in the set [0-5].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '8'.<br/>
                        ○ Match a character in the set [013-6].<br/>
            ○ Match a Unicode digit exactly 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.PropertyAnnotationValidator`1">
            <summary>
            属性注解（特性）验证器
            </summary>
            <typeparam name="TInstance">对象类型</typeparam>
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator`1.#ctor(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            构造函数
            </summary>
            <param name="instance">对象实例</param>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator`1.#ctor(`0,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="instance">对象实例</param>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="P:Furion.Validation.PropertyAnnotationValidator`1.Instance">
            <summary>
            对象实例
            </summary>
        </member>
        <member name="P:Furion.Validation.PropertyAnnotationValidator`1.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator`1.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator`1.GetValidationResults(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator`1.TryValidate(System.Object,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult}@,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            验证逻辑
            </summary>
            <param name="value">待验证的值</param>
            <param name="validationResults"><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> 集合</param>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator`1.GetPropertyName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            解析表达式属性名称
            </summary>
            <param name="propertyExpression">属性表达式</param>
            <returns><see cref="T:System.String"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Furion.Validation.QQNumberValidator">
            <summary>
            QQ 号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.QQNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.QQNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.QQNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9].<br/>
            ○ Match '0' through '9' atomically at least 4 and at most 10 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.RequiredValidator">
            <summary>
            必填验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.RequiredValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.RequiredValidator.AllowEmptyStrings">
            <summary>
            是否允许空字符串
            </summary>
        </member>
        <member name="M:Furion.Validation.RequiredValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.SingleValidator">
            <summary>
            单个值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.SingleValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.SingleValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.StandardPlateNumberValidator">
            <summary>
            标准车牌号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.StandardPlateNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.StandardPlateNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.StandardPlateNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [\u4E91\u4EAC\u4F7F\u5180\u5409\u5B81\u5DDD\u65B0\u664B\u6842\u6CAA\u6D25\u6D59\u6E1D\u6E58\u743C\u7518\u7696\u7CA4\u82CF\u8499\u85CF\u8C6B\u8D35\u8D63\u8FBD\u9102\u95FD\u9655\u9752\u9886\u9C81\u9ED1].<br/>
            ○ Match a character in the set [A-HJ-NP-Z].<br/>
            ○ Match a character in the set [0-9A-HJ-NP-Z] exactly 4 times.<br/>
            ○ Match a character in the set [0-9A-HJ-NP-Z\u5B66\u6302\u6E2F\u6FB3\u8B66].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.StartsWithValidator">
            <summary>
            字符串开头验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.StartsWithValidator.#ctor(System.String,System.StringComparison)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索的值</param>
            <param name="comparison"><see cref="T:System.StringComparison"/></param>
        </member>
        <member name="P:Furion.Validation.StartsWithValidator.Value">
            <summary>
            检索的值
            </summary>
        </member>
        <member name="P:Furion.Validation.StartsWithValidator.Comparison">
            <inheritdoc cref="T:System.StringComparison"/>
        </member>
        <member name="M:Furion.Validation.StartsWithValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.StockCodeValidator">
            <summary>
            股票代码（A股）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.StockCodeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.StockCodeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.StockCodeValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match 's'.<br/>
                        ○ Match a character in the set [hz].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match 'S'.<br/>
                        ○ Match a character in the set [HZ].<br/>
            ○ 2nd capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "00".<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '0'.<br/>
                                ○ Match a Unicode digit exactly 3 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a Unicode digit exactly 3 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "300".<br/>
                        ○ Match a Unicode digit exactly 3 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "60".<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '0'.<br/>
                                ○ Match a Unicode digit exactly 3 times.<br/>
                            ○ Match a Unicode digit exactly 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.StringContainsValidator">
            <summary>
            字符串包含验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.StringContainsValidator.#ctor(System.String,System.StringComparison)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索的值</param>
            <param name="comparison"><see cref="T:System.StringComparison"/></param>
        </member>
        <member name="P:Furion.Validation.StringContainsValidator.Value">
            <summary>
            检索的值
            </summary>
        </member>
        <member name="P:Furion.Validation.StringContainsValidator.Comparison">
            <inheritdoc cref="T:System.StringComparison"/>
        </member>
        <member name="M:Furion.Validation.StringContainsValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.StronglyPasswordValidator">
            <summary>
            强类型密码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.StronglyPasswordValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.StronglyPasswordValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.StronglyPasswordValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match any character other than a whitespace character greedily any number of times.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character atomically at least 6 times.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a Unicode digit.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [A-Z].<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [a-z].<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [ !#-&amp;*?@^].<br/>
            ○ Match any character other than a whitespace character atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.SubnetMaskValidator">
            <summary>
            子网掩码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.SubnetMaskValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.SubnetMaskValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.SubnetMaskValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 4 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ 1st capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                    ○ Match the string ".0.0.0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.".<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match the string ".0.0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.255.".<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match the string ".0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.255.255.".<br/>
                    ○ 4th capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [245].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.TelephoneValidator">
            <summary>
            座机（电话）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.TelephoneValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.TelephoneValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.TelephoneValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a Unicode digit exactly 3 times.<br/>
                        ○ Match '-'.<br/>
                    ○ Match a Unicode digit exactly 8 times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a Unicode digit exactly 4 times.<br/>
                        ○ Match '-'.<br/>
                    ○ Match a Unicode digit greedily at least 7 and at most 8 times.<br/>
            ○ Optional (greedy).<br/>
                ○ Match '-'.<br/>
                ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ThunderValidator">
            <summary>
            迅雷链接验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ThunderValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ThunderValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ThunderValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9CDGKLPSTX-Z].<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.TrainNumberValidator">
            <summary>
            火车车次验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.TrainNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.TrainNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.TrainNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9CDGKLPSTX-Z].<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.UrlValidator">
            <summary>
            网址验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.UrlValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.UrlValidator.WithPort">
            <summary>
            带端口号
            </summary>
        </member>
        <member name="M:Furion.Validation.UrlValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.UrlValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match the string "ht".<br/>
                                ○ Match 'f'.<br/>
                        ○ Match the string "tp".<br/>
                        ○ Match 's' atomically, optionally.<br/>
                    ○ Match the string "://".<br/>
            ○ Loop greedily at least once.<br/>
                ○ 4th capture group.<br/>
                    ○ Match a character in the set [^!#-&amp;*-.?@^\s].<br/>
                    ○ Optional (greedy).<br/>
                        ○ 5th capture group.<br/>
                            ○ Match a character in the set [^!#-&amp;*.?@^\s] greedily at least 1 and at most 64 times.<br/>
                    ○ Match '.'.<br/>
            ○ Match a character in the set [a-z] atomically at least 2 and at most 6 times.<br/>
            ○ Match '/' atomically, optionally.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.UrlValidator.WithPortRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match the string "ht".<br/>
                            ○ Match 'f'.<br/>
                    ○ Match the string "tp".<br/>
                    ○ Match 's' atomically, optionally.<br/>
                    ○ Match the string "://".<br/>
            ○ Match a character in the set [-\w] atomically at least once.<br/>
            ○ Loop greedily at least once.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a character in the set [-\w] atomically at least once.<br/>
            ○ Match ':'.<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 5 times.<br/>
            ○ Match '/' atomically, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.USCIValidator">
            <summary>
            统一社会信用代码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.USCIValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.USCIValidator.Strict">
            <summary>
            严格模式
            </summary>
        </member>
        <member name="M:Furion.Validation.USCIValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.USCIValidator.StrictRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-HJ-NP-RTUW-Y] exactly 2 times.<br/>
            ○ Match a Unicode digit exactly 6 times.<br/>
            ○ Match a character in the set [0-9A-HJ-NP-RTUW-Y] exactly 10 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.USCIValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 15 times.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 18 times.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 20 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.UsernameValidator">
            <summary>
            用户名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.UsernameValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.UsernameValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.UsernameValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically at least 4 and at most 16 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ValidatorBase">
            <summary>
            验证器抽象基类
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.#ctor(System.Func{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="errorMessageAccessor">错误消息资源访问器</param>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.WithErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.ValidatorBase`1">
            <summary>
            验证器抽象基类
            </summary>
            <typeparam name="T">验证值的类型</typeparam>
        </member>
        <member name="F:Furion.Validation.ValidatorBase`1._errorMessageResourceAccessor">
            <summary>
            错误消息资源访问器
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.#ctor(System.Func{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="errorMessageAccessor">错误消息资源访问器</param>
        </member>
        <member name="P:Furion.Validation.ValidatorBase`1.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Furion.Validation.ValidatorBase`1.ErrorMessageString">
            <summary>
            默认错误消息
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.GetValidationResults(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取验证结果
            </summary>
            <param name="value">验证的值</param>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.GetValidationResult(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取验证结果
            </summary>
            <param name="value">验证的值</param>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.WithErrorMessage(System.String)">
            <summary>
            设置错误消息
            </summary>
            <param name="errorMessage">错误消息</param>
            <returns><see cref="T:Furion.Validation.ValidatorBase`1"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.FormatErrorMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            格式化错误消息
            </summary>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.Validate(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            执行验证
            </summary>
            <param name="value">验证的值</param>
            <param name="memberNames">成员名称集合</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.IsValid(`0)">
            <summary>
            检查值有效性
            </summary>
            <param name="value">验证的值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase`1.PlaceholderRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match '}'.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ValueAnnotationValidator">
            <summary>
            单个值注解（特性）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            构造函数
            </summary>
            <param name="validationAttributes">验证特性集合</param>
        </member>
        <member name="P:Furion.Validation.ValueAnnotationValidator.ValidationAttributes">
            <summary>
            验证特性集合
            </summary>
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.GetValidationResults(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.TryValidate(System.Object,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult}@,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            验证逻辑
            </summary>
            <param name="value">待验证的值</param>
            <param name="validationResults"><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> 集合</param>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.Validation.VersionValidator">
            <summary>
            版本号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.VersionValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.VersionValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.VersionValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Loop exactly 2 times.<br/>
                ○ Match '.'.<br/>
                ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
    </members>
</doc>
