<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Validation</name>
    </assembly>
    <members>
        <member name="T:System.ComponentModel.DataAnnotations.ColorAttribute">
            <summary>
            颜色值验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ColorAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ColorAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.IMEIAttributeAttribute">
            <summary>
            手机机身码验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IMEIAttributeAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IMEIAttributeAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.TrainNumberAttribute">
            <summary>
            火车车次验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TrainNumberAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TrainNumberAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the AmPmTimeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.AmPmTimeRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Base64Regex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Base64Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Base64Regex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Base64Regex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Base64Regex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Base64Regex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Base64Regex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Base64Regex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Base64Regex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Base64Regex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseNameRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ChineseNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ChineseNameRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseNameRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseNameRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseNameRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseNameRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseNameRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseNameRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseNameRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ChineseRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ChineseRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ChineseRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ChineseRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ColorRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ColorRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DomainRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DomainRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DomainRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DomainRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DomainRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DomainRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DomainRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DomainRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DomainRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DomainRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Ed2kRegex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Ed2kRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Ed2kRegex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Ed2kRegex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Ed2kRegex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Ed2kRegex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Ed2kRegex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Ed2kRegex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Ed2kRegex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Ed2kRegex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmailAllowChineseRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailAllowChineseRegex_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EmailRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EmailRegex_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EmailRegex_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EmailRegex_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EnglishNameRegex_9">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EnglishNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EnglishNameRegex_9.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EnglishNameRegex_9.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EnglishNameRegex_9.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EnglishNameRegex_9.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EnglishNameRegex_9.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EnglishNameRegex_9.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EnglishNameRegex_9.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EnglishNameRegex_9.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidUuidRegex_10">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the GuidUuidRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.GuidUuidRegex_10.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidUuidRegex_10.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidUuidRegex_10.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidUuidRegex_10.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.GuidUuidRegex_10.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidUuidRegex_10.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidUuidRegex_10.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.GuidUuidRegex_10.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IMEIRegex_11">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IMEIRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IMEIRegex_11.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_11.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IMEIRegex_11.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_11.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IMEIRegex_11.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_11.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_11.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_11.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPv4Regex_12">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IPv4Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IPv4Regex_12.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv4Regex_12.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPv4Regex_12.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv4Regex_12.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPv4Regex_12.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv4Regex_12.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv4Regex_12.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv4Regex_12.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPv6Regex_13">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IPv6Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IPv6Regex_13.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv6Regex_13.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPv6Regex_13.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv6Regex_13.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IPv6Regex_13.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv6Regex_13.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv6Regex_13.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IPv6Regex_13.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MacAddressRegex_14">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MacAddressRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MacAddressRegex_14.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacAddressRegex_14.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MacAddressRegex_14.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacAddressRegex_14.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MacAddressRegex_14.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacAddressRegex_14.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacAddressRegex_14.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MacAddressRegex_14.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MagnetRegex_15">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MagnetRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MagnetRegex_15.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetRegex_15.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MagnetRegex_15.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetRegex_15.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MagnetRegex_15.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetRegex_15.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetRegex_15.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetRegex_15.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MD5Regex_16">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MD5Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MD5Regex_16.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MD5Regex_16.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MD5Regex_16.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MD5Regex_16.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MD5Regex_16.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MD5Regex_16.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MD5Regex_16.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MD5Regex_16.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MilitaryTimeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MilitaryTimeRegex_17.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PhoneNumberRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberRegex_18.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PhoneNumberStrictRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PhoneNumberStrictRegex_19.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PostalCodeRegex_20">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PostalCodeRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PostalCodeRegex_20.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PostalCodeRegex_20.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PostalCodeRegex_20.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PostalCodeRegex_20.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PostalCodeRegex_20.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PostalCodeRegex_20.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PostalCodeRegex_20.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PostalCodeRegex_20.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StronglyPasswordRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StronglyPasswordRegex_21.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SubnetMaskRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_22.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ThunderLinkRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_23.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlRegex_24">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UrlRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UrlRegex_24.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_24.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlRegex_24.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_24.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlRegex_24.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_24.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_24.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_24.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UrlWithPortRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_25.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.USCIStrictRegex_26">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the USCIStrictRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.USCIStrictRegex_26.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_26.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.USCIStrictRegex_26.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_26.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.USCIStrictRegex_26.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_26.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_26.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_26.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UsernameRegex_27">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UsernameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UsernameRegex_27.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UsernameRegex_27.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UsernameRegex_27.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UsernameRegex_27.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UsernameRegex_27.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UsernameRegex_27.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UsernameRegex_27.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UsernameRegex_27.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_28">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the VersionRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.VersionRegex_28.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_28.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_28.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_28.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.VersionRegex_28.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_28.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_28.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.VersionRegex_28.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsBoundary(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>Determines whether the specified index is a boundary.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IsWordChar(System.Char)">
            <summary>Determines whether the character is part of the [\w] set.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiHexDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFabcdef".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLetters">
            <summary>Supports searching for characters in or not in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF87FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_34020000000000000000">
            <summary>Supports searching for characters in or not in "2459".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_7B0400800100004000000000">
            <summary>Supports searching for characters in or not in " !#$%&amp;*?@^".</summary>
        </member>
        <member name="T:Furion.Validation.ValidatorRelationship">
            <summary>
            验证器关系
            </summary>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.Default">
            <summary>
            缺省值
            </summary>
            <remarks><seealso cref="F:Furion.Validation.ValidatorRelationship.And"/></remarks>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="T:Furion.Validation.AmPmTimeValidator">
            <summary>
            12 小时制时间（hh:mm:ss）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.AmPmTimeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.AmPmTimeValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.AmPmTimeValidator.AmPmTimeRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '1'.<br/>
                    ○ Match a character in the set [0-2].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '0' atomically, optionally.<br/>
                    ○ Match a character in the set [1-9].<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.Base64Validator">
            <summary>
            Base64 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.Base64Validator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.Base64Validator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.Base64Validator.Base64Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a whitespace character atomically any number of times.<br/>
            ○ Match a character in the set [Dd].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match a character in the set [Tt].<br/>
            ○ Match a character in the set [Aa].<br/>
            ○ Match ':'.<br/>
            ○ Optional (greedy).<br/>
                ○ Match a character in the set [A-Za-z\u212A] atomically at least once.<br/>
                ○ Match '/'.<br/>
                ○ Match a character in the set [+-.0-9A-Za-z\u212A] greedily at least once.<br/>
                ○ Optional (greedy).<br/>
                    ○ Match ';'.<br/>
                    ○ Match a character in the set [-A-Za-z\u212A] atomically at least once.<br/>
                    ○ Match '='.<br/>
                    ○ Match a character in the set [-0-9A-Za-z\u212A] greedily at least once.<br/>
            ○ Optional (greedy).<br/>
                ○ Match ';'.<br/>
                ○ Match a character in the set [Bb].<br/>
                ○ Match a character in the set [Aa].<br/>
                ○ Match a character in the set [Ss].<br/>
                ○ Match a character in the set [Ee].<br/>
                ○ Match the string "64".<br/>
            ○ Match ','.<br/>
            ○ 1st capture group.<br/>
                ○ Match a character in the set [!$-;=?-Z_a-z~\u212A\s] lazily any number of times.<br/>
            ○ Match a whitespace character greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ChineseNameValidator">
            <summary>
            中文姓名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.ChineseNameRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [\u00B7\u4E00-\u9FA5] atomically at least 2 and at most 16 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ChineseValidator">
            <summary>
            中文/汉字验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ChineseValidator.ChineseRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 7 alternative expressions.<br/>
                    ○ Match a character in the set [\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879].<br/>
                        ○ Match a character in the set [\uDC00-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud869'.<br/>
                        ○ Match a character in the set [\uDC00-\uDED6\uDF00-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud86d'.<br/>
                        ○ Match a character in the set [\uDC00-\uDF34\uDF40-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud86e'.<br/>
                        ○ Match a character in the set [\uDC00-\uDC1D\uDC20-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud873'.<br/>
                        ○ Match a character in the set [\uDC00-\uDEA1\uDEB0-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud87a'.<br/>
                        ○ Match a character in the set [\uDC00-\uDFE0].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ColorValidator">
            <summary>
            颜色验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ColorValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ColorValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ColorValidator.ColorRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 3 alternative expressions, atomically.<br/>
                ○ 1st capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '#'.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 6 times.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 3 times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match '('.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 5th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 6th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ')'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 7th capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match '('.<br/>
                    ○ 8th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 9th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 10th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 11th capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match an empty string.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match any character other than '\n'.<br/>
                                        ○ Match '0'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '0'.<br/>
                                ○ Match any character other than '\n'.<br/>
                                ○ Match '0' through '9'.<br/>
                    ○ Match ')'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.CompositeValidator">
            <summary>
            组合验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.CompositeValidator.#ctor(System.Collections.Generic.List{Furion.Validation.ValidatorBase},Furion.Validation.ValidatorRelationship)">
            <summary>
            构造函数
            </summary>
            <param name="validators">验证器集合</param>
            <param name="relationship"><see cref="T:Furion.Validation.ValidatorRelationship"/></param>
        </member>
        <member name="P:Furion.Validation.CompositeValidator.ValidatorCollection">
            <summary>
            验证器集合
            </summary>
        </member>
        <member name="P:Furion.Validation.CompositeValidator.Relationship">
            <inheritdoc cref="T:Furion.Validation.ValidatorRelationship" />
        </member>
        <member name="M:Furion.Validation.CompositeValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.DomainValidator">
            <summary>
            域名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.DomainValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.DomainValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.DomainValidator.DomainRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ 1st capture group.<br/>
                    ○ Match a character in the set [-0-9A-Za-z] atomically at least once.<br/>
                    ○ Match '.'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a character in the set [A-Za-z] atomically at least twice.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.Ed2kValidator">
            <summary>
            ed2k 链接验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.Ed2kValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.Ed2kValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.Ed2kValidator.Ed2kRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "ed2k://|file|".<br/>
            ○ Match a character other than '\n' greedily at least once.<br/>
            ○ Match the string "|/".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.EmailValidator">
            <summary>
            电子邮箱验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.EmailValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.EmailValidator.AllowChinese">
            <summary>
            允许中文
            </summary>
        </member>
        <member name="M:Furion.Validation.EmailValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.EmailValidator.EmailAllowChineseRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Za-z\u4E00-\u9FA5] atomically at least once.<br/>
            ○ Match '@'.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically at least once.<br/>
            ○ Loop greedily at least once.<br/>
                ○ 1st capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a character in the set [-0-9A-Z_a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.EmailValidator.EmailRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match a character in the set [^"(),.:-&lt;&gt;@[-]\s] greedily at least once.<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ 3rd capture group.<br/>
                                ○ Match '.'.<br/>
                                ○ Match a character in the set [^"(),.:-&lt;&gt;@[-]\s] atomically at least once.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match '"'.<br/>
                        ○ Match a character other than '\n' greedily at least once.<br/>
                        ○ Match '"'.<br/>
            ○ Match '@'.<br/>
            ○ 5th capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 6th capture group.<br/>
                        ○ Match '['.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
                        ○ Match '.'.<br/>
                        ○ Match '0' through '9' atomically at least 1 and at most 3 times.<br/>
                        ○ Match ']'.<br/>
                    ○ 7th capture group.<br/>
                        ○ Loop greedily at least once.<br/>
                            ○ 8th capture group.<br/>
                                ○ Match a character in the set [-0-9A-Za-z] atomically at least once.<br/>
                                ○ Match '.'.<br/>
                        ○ Match a character in the set [A-Za-z] atomically at least twice.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.EnglishNameValidator">
            <summary>
            英文姓名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.EnglishNameValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.EnglishNameValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.EnglishNameValidator.EnglishNameRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ 1st capture group.<br/>
                ○ Match if at the beginning of the string.<br/>
                ○ Match a character in the set [A-Za-z].<br/>
                ○ Match a character in the set [A-Za-z\s] greedily at most 20 times.<br/>
                ○ Match a character in the set [A-Za-z].<br/>
                ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.GuidUuidValidator">
            <summary>
            GUID/UUID 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.GuidUuidValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.GuidUuidValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.GuidUuidValidator.GuidUuidRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
            ○ Loop exactly 4 times.<br/>
                ○ Match a character in the set [A-Fa-f\d] exactly 4 times.<br/>
                ○ Match '-'.<br/>
            ○ Match a character in the set [A-Fa-f\d] exactly 12 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IMEIValidator">
            <summary>
            手机机身码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IMEIValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IMEIValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IMEIValidator.IMEIRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least 15 and at most 17 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IPv4Validator">
            <summary>
            IPv4 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IPv4Validator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IPv4Validator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IPv4Validator.IPv4Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop exactly 3 times.<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-9].<br/>
                                ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match a Unicode digit exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match a Unicode digit.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                    ○ Match '.'.<br/>
            ○ 3rd capture group.<br/>
                ○ Match with 5 alternative expressions.<br/>
                    ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a Unicode digit exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match a character in the set [0-4].<br/>
                        ○ Match a Unicode digit.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "25".<br/>
                        ○ Match a character in the set [0-5].<br/>
            ○ Optional (greedy).<br/>
                ○ Match ':'.<br/>
                ○ Match with 7 alternative expressions.<br/>
                    ○ Match '0' through '9'.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-9].<br/>
                        ○ Match '0' through '9' greedily at least 1 and at most 3 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [1-5].<br/>
                        ○ Match '0' through '9' exactly 4 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '6'.<br/>
                        ○ Match a character in the set [0-4].<br/>
                        ○ Match '0' through '9' exactly 3 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "65".<br/>
                        ○ Match a character in the set [0-4].<br/>
                        ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "655".<br/>
                        ○ Match a character in the set [0-2].<br/>
                        ○ Match '0' through '9'.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match the string "6553".<br/>
                        ○ Match a character in the set [0-5].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IPv6Validator">
            <summary>
            IPv6 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IPv6Validator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IPv6Validator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IPv6Validator.IPv6Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions, atomically.<br/>
                ○ 1st capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match with 12 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Loop exactly 7 times.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 2nd capture group.<br/>
                            ○ Loop exactly 6 times.<br/>
                                ○ 3rd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 4th capture group.<br/>
                            ○ Loop exactly 5 times.<br/>
                                ○ 5th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Optional (greedy).<br/>
                                ○ 6th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 7th capture group.<br/>
                            ○ Loop exactly 4 times.<br/>
                                ○ 8th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 2 times.<br/>
                                ○ 9th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 10th capture group.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 11th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 3 times.<br/>
                                ○ 12th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 13th capture group.<br/>
                            ○ Loop exactly 2 times.<br/>
                                ○ 14th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 4 times.<br/>
                                ○ 15th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 16th capture group.<br/>
                            ○ Loop exactly 6 times.<br/>
                                ○ 17th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 18th capture group.<br/>
                                    ○ 19th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 20th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 21st capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 22nd capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 23rd capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 24th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 25th capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 26th capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 27th capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 28th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 29th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 30th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 31st capture group.<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 32nd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 33rd capture group.<br/>
                                    ○ 34th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 35th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 36th capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 37th capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 38th capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 39th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 40th capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 41st capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 42nd capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 43rd capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 44th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 45th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 46th capture group.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 47th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 48th capture group.<br/>
                                    ○ 49th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 50th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 51st capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 52nd capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 53rd capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 54th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 55th capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 56th capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 57th capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 58th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 59th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 60th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 61st capture group.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 62nd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 63rd capture group.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 6 times.<br/>
                                ○ 64th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 65th capture group.<br/>
                            ○ Loop greedily at least 1 and at most 7 times.<br/>
                                ○ 66th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 67th capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '['.<br/>
                    ○ Match with 12 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Loop exactly 7 times.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 68th capture group.<br/>
                            ○ Loop exactly 6 times.<br/>
                                ○ 69th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 70th capture group.<br/>
                            ○ Loop exactly 5 times.<br/>
                                ○ 71st capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Optional (greedy).<br/>
                                ○ 72nd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 73rd capture group.<br/>
                            ○ Loop exactly 4 times.<br/>
                                ○ 74th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 2 times.<br/>
                                ○ 75th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 76th capture group.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 77th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 3 times.<br/>
                                ○ 78th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 79th capture group.<br/>
                            ○ Loop exactly 2 times.<br/>
                                ○ 80th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop greedily at most 4 times.<br/>
                                ○ 81st capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 82nd capture group.<br/>
                            ○ Loop exactly 6 times.<br/>
                                ○ 83rd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 84th capture group.<br/>
                                    ○ 85th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 86th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 87th capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 88th capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 89th capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 90th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 91st capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 92nd capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 93rd capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 94th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 95th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 96th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 97th capture group.<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 98th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 99th capture group.<br/>
                                    ○ 100th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 101st capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 102nd capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 103rd capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 104th capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 105th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 106th capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 107th capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 108th capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 109th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 110th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 111th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 112th capture group.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 113th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Loop exactly 3 times.<br/>
                                ○ 114th capture group.<br/>
                                    ○ 115th capture group.<br/>
                                        ○ Match if at a word boundary.<br/>
                                        ○ 116th capture group.<br/>
                                            ○ Match with 4 alternative expressions.<br/>
                                                ○ 117th capture group.<br/>
                                                    ○ Match the string "25".<br/>
                                                    ○ Match a character in the set [0-5].<br/>
                                                ○ 118th capture group.<br/>
                                                    ○ Match '1'.<br/>
                                                    ○ Match a Unicode digit exactly 2 times.<br/>
                                                ○ 119th capture group.<br/>
                                                    ○ Match '2'.<br/>
                                                    ○ Match a character in the set [0-4].<br/>
                                                    ○ Match a Unicode digit.<br/>
                                                ○ 120th capture group.<br/>
                                                    ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                        ○ Match if at a word boundary.<br/>
                                    ○ Match '.'.<br/>
                            ○ 121st capture group.<br/>
                                ○ Match if at a word boundary.<br/>
                                ○ 122nd capture group.<br/>
                                    ○ Match with 4 alternative expressions.<br/>
                                        ○ 123rd capture group.<br/>
                                            ○ Match the string "25".<br/>
                                            ○ Match a character in the set [0-5].<br/>
                                        ○ 124th capture group.<br/>
                                            ○ Match '1'.<br/>
                                            ○ Match a Unicode digit exactly 2 times.<br/>
                                        ○ 125th capture group.<br/>
                                            ○ Match '2'.<br/>
                                            ○ Match a character in the set [0-4].<br/>
                                            ○ Match a Unicode digit.<br/>
                                        ○ 126th capture group.<br/>
                                            ○ Match a Unicode digit atomically at least 1 and at most 2 times.<br/>
                                ○ Match if at a word boundary.<br/>
                        ○ 127th capture group.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 5 times.<br/>
                                ○ 128th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 129th capture group.<br/>
                            ○ Match the string "::".<br/>
                            ○ Loop greedily at most 6 times.<br/>
                                ○ 130th capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                        ○ 131st capture group.<br/>
                            ○ Loop greedily at least 1 and at most 7 times.<br/>
                                ○ 132nd capture group.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                    ○ Match ':'.<br/>
                            ○ Match ':'.<br/>
                    ○ Match ']'.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match ':'.<br/>
                        ○ Match with 7 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-9].<br/>
                                ○ Match '0' through '9' greedily at least 1 and at most 3 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [1-5].<br/>
                                ○ Match '0' through '9' exactly 4 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '6'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9' exactly 3 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "65".<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "655".<br/>
                                ○ Match a character in the set [0-2].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "6553".<br/>
                                ○ Match a character in the set [0-5].<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.MacAddressValidator">
            <summary>
            MAC 地址验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.MacAddressValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.MacAddressValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.MacAddressValidator.MacAddressRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Loop exactly 5 times.<br/>
                            ○ 3rd capture group.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                ○ Match ':'.<br/>
                    ○ 4th capture group.<br/>
                        ○ Loop exactly 5 times.<br/>
                            ○ 5th capture group.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                ○ Match '-'.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.MagnetValidator">
            <summary>
            磁力链接验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.MagnetValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.MagnetValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.MagnetValidator.MagnetRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "magnet:?xt=urn:btih:".<br/>
            ○ Match a character in the set [0-9A-Fa-f] greedily at least 40 times.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.MD5Validator">
            <summary>
            MD5 验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.MD5Validator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.MD5Validator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.MD5Validator.MD5Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [0-9A-Fa-f] exactly 32 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.MilitaryTimeValidator">
            <summary>
            24 小时制时间（HH:mm:ss）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.MilitaryTimeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.MilitaryTimeValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.MilitaryTimeValidator.MilitaryTimeRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [01].<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '2'.<br/>
                    ○ Match a character in the set [0-3].<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match ':'.<br/>
            ○ Match a character in the set [0-5].<br/>
            ○ Match a Unicode digit.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.NotEmptyValidator">
            <summary>
            非空验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.NotEmptyValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.NotEmptyValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.PhoneNumberValidator">
            <summary>
            手机号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.PhoneNumberValidator.Strict">
            <summary>
            严格模式
            </summary>
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.PhoneNumberRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match '+'.<br/>
                    ○ Match the string "00".<br/>
                ○ Match the string "86".<br/>
            ○ Match '1'.<br/>
            ○ Match a character in the set [3-9].<br/>
            ○ Match a Unicode digit exactly 9 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.PhoneNumberStrictRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match '+'.<br/>
                    ○ Match the string "00".<br/>
                ○ Match the string "86".<br/>
            ○ Match '1'.<br/>
            ○ Match with 7 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '3'.<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '4'.<br/>
                    ○ Match a character in the set [5-79].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '5'.<br/>
                    ○ Match a character in the set [0-35-9].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '6'.<br/>
                    ○ Match a character in the set [5-7].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '7'.<br/>
                    ○ Match a character in the set [0-8].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '8'.<br/>
                    ○ Match a Unicode digit.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '9'.<br/>
                    ○ Match a character in the set [189].<br/>
            ○ Match a Unicode digit exactly 8 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.PostalCodeValidator">
            <summary>
            邮政编码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.PostalCodeRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 9 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a character in the set [0-356].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match a character in the set [0-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '3'.<br/>
                        ○ Match a character in the set [0-6].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '4'.<br/>
                        ○ Match a character in the set [0-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '5'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '6'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '7'.<br/>
                        ○ Match a character in the set [0-5].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '8'.<br/>
                        ○ Match a character in the set [013-6].<br/>
            ○ Match a Unicode digit exactly 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.RequiredValidator">
            <summary>
            必填验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.RequiredValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.RequiredValidator.AllowEmptyStrings">
            <summary>
            是否允许空字符串
            </summary>
        </member>
        <member name="M:Furion.Validation.RequiredValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.StronglyPasswordValidator">
            <summary>
            强类型密码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.StronglyPasswordValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.StronglyPasswordValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.StronglyPasswordValidator.StronglyPasswordRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match any character other than a whitespace character greedily any number of times.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character atomically at least 6 times.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a Unicode digit.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [A-Z].<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [a-z].<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [ !#-&amp;*?@^].<br/>
            ○ Match any character other than a whitespace character atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.SubnetMaskValidator">
            <summary>
            子网掩码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.SubnetMaskValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.SubnetMaskValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.SubnetMaskValidator.SubnetMaskRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 4 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ 1st capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                    ○ Match the string ".0.0.0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.".<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match the string ".0.0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.255.".<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match the string ".0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.255.255.".<br/>
                    ○ 4th capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [245].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ThunderValidator">
            <summary>
            迅雷链接验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ThunderValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ThunderValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ThunderValidator.ThunderLinkRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9CDGKLPSTX-Z].<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.TrainNumberValidator">
            <summary>
            火车车次验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.TrainNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.TrainNumberValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.TrainNumberValidator.TrainNumberRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9CDGKLPSTX-Z].<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.UrlValidator">
            <summary>
            网址验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.UrlValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.UrlValidator.WithPort">
            <summary>
            带端口号
            </summary>
        </member>
        <member name="M:Furion.Validation.UrlValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.UrlValidator.UrlRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match the string "ht".<br/>
                                ○ Match 'f'.<br/>
                        ○ Match the string "tp".<br/>
                        ○ Match 's' atomically, optionally.<br/>
                    ○ Match the string "://".<br/>
            ○ Loop greedily at least once.<br/>
                ○ 4th capture group.<br/>
                    ○ Match a character in the set [^!#-&amp;*-.?@^\s].<br/>
                    ○ Optional (greedy).<br/>
                        ○ 5th capture group.<br/>
                            ○ Match a character in the set [^!#-&amp;*.?@^\s] greedily at least 1 and at most 64 times.<br/>
                    ○ Match '.'.<br/>
            ○ Match a character in the set [a-z] atomically at least 2 and at most 6 times.<br/>
            ○ Match '/' atomically, optionally.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.UrlValidator.UrlWithPortRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match the string "ht".<br/>
                            ○ Match 'f'.<br/>
                    ○ Match the string "tp".<br/>
                    ○ Match 's' atomically, optionally.<br/>
                    ○ Match the string "://".<br/>
            ○ Match a character in the set [-\w] atomically at least once.<br/>
            ○ Loop greedily at least once.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a character in the set [-\w] atomically at least once.<br/>
            ○ Match ':'.<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 5 times.<br/>
            ○ Match '/' atomically, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.USCIValidator">
            <summary>
            统一社会信用代码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.USCIValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Furion.Validation.USCIValidator.Strict">
            <summary>
            严格模式
            </summary>
        </member>
        <member name="M:Furion.Validation.USCIValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.USCIValidator.USCIStrictRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 15 times.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 18 times.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 20 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.USCIValidator.USCIRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 15 times.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 18 times.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 20 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.UsernameValidator">
            <summary>
            用户名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.UsernameValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.UsernameValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.UsernameValidator.UsernameRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically at least 4 and at most 16 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ValidatorBase">
            <summary>
            验证器抽象基类
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.IsValid(System.Object)">
            <summary>
            验证值有效性
            </summary>
            <param name="value">待验证的值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.Validate(System.Object)">
            <summary>
            验证逻辑
            </summary>
            <param name="value">待验证的值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.Validation.VersionValidator">
            <summary>
            版本号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.VersionValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.VersionValidator.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.VersionValidator.VersionRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least once.<br/>
            ○ Loop exactly 2 times.<br/>
                ○ Match '.'.<br/>
                ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
    </members>
</doc>
