<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Validation</name>
    </assembly>
    <members>
        <member name="T:System.ComponentModel.DataAnnotations.AgeAttribute">
            <summary>
            年龄（0-120）验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AgeAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AgeAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ChineseAttribute">
            <summary>
            中文/汉字验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ChineseAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ChineseAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ChineseNameAttribute">
            <summary>
            中文姓名验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ChineseNameAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ChineseNameAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.ColorValueAttribute">
            <summary>
            颜色值验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ColorValueAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ColorValueAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.DomainAttribute">
            <summary>
            域名验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DomainAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.DomainAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.EndsWithAttribute">
            <summary>
            以特定字符串结尾的验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EndsWithAttribute.#ctor(System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EndsWithAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.EndsWithAttribute.Value">
            <summary>
            检索值
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EndsWithAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.EndsWithAttribute.FormatErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.IDCardNumberAttribute">
            <summary>
            身份证号验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IDCardNumberAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IDCardNumberAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.NotEmptyAttribute">
            <summary>
            非空验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.NotEmptyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.NotEmptyAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.PasswordAttribute">
            <summary>
            密码验证特性
            </summary>
            <remarks>
            密码长度为 6-18 位，包含至少一个字母和一个数字
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PasswordAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PasswordAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.PhoneNumberAttribute">
            <summary>
            手机号验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PhoneNumberAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PhoneNumberAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.PostalCodeAttribute">
            <summary>
            邮政编码验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PostalCodeAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.PostalCodeAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.SingleAttribute">
            <summary>
            单个值验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.SingleAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.SingleAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.StartsWithAttribute">
            <summary>
            以特定字符串开头的验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StartsWithAttribute.#ctor(System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StartsWithAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.StartsWithAttribute.Value">
            <summary>
            检索值
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StartsWithAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StartsWithAttribute.FormatErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.StringContainsAttribute">
            <summary>
            包含特定字符串的验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringContainsAttribute.#ctor(System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringContainsAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.StringContainsAttribute.Value">
            <summary>
            检索值
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringContainsAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StringContainsAttribute.FormatErrorMessage(System.String)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.StrongPasswordAttribute">
            <summary>
            强类型密码验证特性
            </summary>
            <remarks>
            密码长度最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StrongPasswordAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.StrongPasswordAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.TelephoneAttribute">
            <summary>
            座机（电话）验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TelephoneAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TelephoneAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.UserNameAttribute">
            <summary>
            用户名验证特性
            </summary>
            <remarks>
            长度 4-16 位，仅支持字母，数字，下划线，减号组合
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UserNameAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.UserNameAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StandardRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the StandardRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.StandardRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StandardRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StandardRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StandardRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.StandardRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StandardRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StandardRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.StandardRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_9">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_9.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_9.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_10">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_10.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_10.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_10.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_10.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_10.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_10.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_10.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_10.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_11">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_11.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_11.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_12">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_12.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_12.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_13">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_13.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_13.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_14">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the PlaceholderRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.PlaceholderRegex_14.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_14.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_14.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_14.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.PlaceholderRegex_14.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_14.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_14.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.PlaceholderRegex_14.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpacesRegex_15">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SpacesRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SpacesRegex_15.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpacesRegex_15.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpacesRegex_15.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpacesRegex_15.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SpacesRegex_15.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpacesRegex_15.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpacesRegex_15.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SpacesRegex_15.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyWhiteSpace(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a whitespace character.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptWhiteSpace">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f!\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLetters">
            <summary>Supports searching for characters in or not in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_20FF03FEFFFF07FEFFFF07">
            <summary>Supports searching for characters in or not in "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_40FF030000000000000000">
            <summary>Supports searching for characters in or not in ".0123456789".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_7B0400800100004000000000">
            <summary>Supports searching for characters in or not in " !#$%&amp;*?@^".</summary>
        </member>
        <member name="T:Furion.Validation.ValidatorRelationship">
            <summary>
            验证器关系
            </summary>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.Default">
            <summary>
            缺省值
            </summary>
            <remarks><seealso cref="F:Furion.Validation.ValidatorRelationship.And"/></remarks>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.And">
            <summary>
            并且
            </summary>
        </member>
        <member name="F:Furion.Validation.ValidatorRelationship.Or">
            <summary>
            或者
            </summary>
        </member>
        <member name="T:Furion.Validation.ValidatorBaseExtensions">
            <summary>
            <see cref="T:Furion.Validation.ValidatorBase"/> 拓展类
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBaseExtensions.WithErrorMessage``1(``0,System.String)">
            <summary>
            设置错误消息
            </summary>
            <typeparam name="TValidator"><see cref="T:Furion.Validation.ValidatorBase"/></typeparam>
            <param name="validator"><typeparamref name="TValidator"/></param>
            <param name="errorMessage">错误消息</param>
            <returns><typeparamref name="TValidator"/></returns>
        </member>
        <member name="T:Furion.Validation.Resources.Strings">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.AgeValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid age format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.BankCardNumberValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid bank card number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.ChineseNameValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid Chinese name. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.ChineseValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid Chinese. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.ColorValueValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid color value. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.CompositeValidator_Invalid">
            <summary>
              查找类似 The field {0} is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.CustomValidator_Invalid">
            <summary>
              查找类似 The field {0} is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.DomainValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid domain format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.EndsWithValidator_Invalid">
            <summary>
              查找类似 The field {1} is not end with the string {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.IDCardNumberValidator_invalid">
            <summary>
              查找类似 The field {0} is not a valid ID card number format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.NotEmptyValidator_Invalid">
            <summary>
              查找类似 The field {0} is not allow empty values. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.PasswordValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid password format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.PhoneNumberValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid phone number format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.PostalCodeValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid postal code format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.SingleValidator_Invalid">
            <summary>
              查找类似 The field {0} only allows for a single value. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.StartsWithValidator_Invalid">
            <summary>
              查找类似 The field {1} is not start with the string {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.StringContainsValidator_Invalid">
            <summary>
              查找类似 The field {1} is not contain the string {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.StrongPasswordValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid strong password format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.TelephoneValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid telephone format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.UserNameValidator_Invalid">
            <summary>
              查找类似 The field {0} is not a valid username format. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Furion.Validation.Resources.Strings.ValidatorBase_Invalid">
            <summary>
              查找类似 The field {0} is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="T:Furion.Validation.AgeValidator">
            <summary>
            年龄（0-120）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.AgeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.AgeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.AgeValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 4 alternative expressions.<br/>
                ○ Match '0' through '9'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [1-9].<br/>
                    ○ Match '0' through '9' atomically, optionally.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '1'.<br/>
                    ○ Match a character in the set [01].<br/>
                    ○ Match '0' through '9'.<br/>
                ○ Match the string "120".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.BankCardNumberValidator">
            <summary>
            银行卡号验证器
            </summary>
            <remarks>
            <see href="https://pay.weixin.qq.com/wiki/doc/api/xiaowei.php?chapter=22_1">银行卡号对照表</see>
            </remarks>
        </member>
        <member name="M:Furion.Validation.BankCardNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.BankCardNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.BankCardNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9].<br/>
            ○ Match a Unicode digit atomically at least 9 and at most 29 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ChineseNameValidator">
            <summary>
            中文姓名验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ChineseNameValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [\u00B7\u4E00-\u9FA5] atomically at least 2 and at most 16 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ChineseValidator">
            <summary>
            中文/汉字验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ChineseValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ChineseValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ Match with 7 alternative expressions.<br/>
                    ○ Match a character in the set [\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a character in the set [\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879].<br/>
                        ○ Match a character in the set [\uDC00-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud869'.<br/>
                        ○ Match a character in the set [\uDC00-\uDED6\uDF00-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud86d'.<br/>
                        ○ Match a character in the set [\uDC00-\uDF34\uDF40-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud86e'.<br/>
                        ○ Match a character in the set [\uDC00-\uDC1D\uDC20-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud873'.<br/>
                        ○ Match a character in the set [\uDC00-\uDEA1\uDEB0-\uDFFF].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '\ud87a'.<br/>
                        ○ Match a character in the set [\uDC00-\uDFE0].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ColorValueValidator">
            <summary>
            颜色值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ColorValueValidator.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="fullMode">全面模式</param>
        </member>
        <member name="P:Furion.Validation.ColorValueValidator.FullMode">
            <summary>
            全面模式
            </summary>
        </member>
        <member name="M:Furion.Validation.ColorValueValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ColorValueValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 7 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '#'.<br/>
                    ○ Loop greedily at least 1 and at most 2 times.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 3 times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match a character in the set [Aa] atomically, optionally.<br/>
                    ○ Match '('.<br/>
                    ○ Loop exactly 2 times.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
                        ○ Match '%' atomically, optionally.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match ','.<br/>
                    ○ Match a whitespace character greedily any number of times.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a Unicode digit greedily at least once.<br/>
                        ○ Match '%' greedily, optionally.<br/>
                        ○ Match a whitespace character greedily any number of times.<br/>
                        ○ Optional (greedy).<br/>
                            ○ Match ','.<br/>
                            ○ Match a whitespace character atomically any number of times.<br/>
                            ○ Match a character in the set [.0-9] greedily at least once.<br/>
                            ○ Match a whitespace character greedily any number of times.<br/>
                    ○ Match ')'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Hh].<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [Ss].<br/>
                            ○ Match a character in the set [Ll].<br/>
                            ○ Match a character in the set [Aa] atomically, optionally.<br/>
                            ○ Match '('.<br/>
                            ○ Loop exactly 2 times.<br/>
                                ○ Match a whitespace character atomically any number of times.<br/>
                                ○ Match a Unicode digit atomically at least once.<br/>
                                ○ Match '%' atomically, optionally.<br/>
                                ○ Match a whitespace character atomically any number of times.<br/>
                                ○ Match ','.<br/>
                            ○ Match a whitespace character greedily any number of times.<br/>
                            ○ Optional (greedy).<br/>
                                ○ Match a Unicode digit greedily at least once.<br/>
                                ○ Match '%' greedily, optionally.<br/>
                                ○ Match a whitespace character greedily any number of times.<br/>
                                ○ Optional (greedy).<br/>
                                    ○ Match ','.<br/>
                                    ○ Match a whitespace character atomically any number of times.<br/>
                                    ○ Match a character in the set [.0-9] greedily at least once.<br/>
                                    ○ Match a whitespace character greedily any number of times.<br/>
                            ○ Match ')'.<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match a character in the set [Ww].<br/>
                            ○ Match a character in the set [Bb].<br/>
                            ○ Match '('.<br/>
                            ○ Loop exactly 2 times.<br/>
                                ○ Match a whitespace character atomically any number of times.<br/>
                                ○ Match a Unicode digit atomically at least once.<br/>
                                ○ Match '%' atomically, optionally.<br/>
                                ○ Match a whitespace character atomically any number of times.<br/>
                                ○ Match ','.<br/>
                            ○ Match a whitespace character greedily any number of times.<br/>
                            ○ Optional (greedy).<br/>
                                ○ Match a Unicode digit greedily at least once.<br/>
                                ○ Match '%' greedily, optionally.<br/>
                                ○ Match a whitespace character atomically any number of times.<br/>
                            ○ Match ')'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Hh].<br/>
                    ○ Match '('.<br/>
                    ○ Loop exactly 2 times.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
                        ○ Match '%' atomically, optionally.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match ','.<br/>
                    ○ Match a whitespace character greedily any number of times.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a Unicode digit greedily at least once.<br/>
                        ○ Match '%' greedily, optionally.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match ')'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Kk\u212A].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Cc].<br/>
                    ○ Match a character in the set [Hh].<br/>
                    ○ Match '('.<br/>
                    ○ Loop exactly 2 times.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
                        ○ Match '%' atomically, optionally.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match ','.<br/>
                    ○ Match a whitespace character greedily any number of times.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a Unicode digit greedily at least once.<br/>
                        ○ Match '%' greedily, optionally.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match ')'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match '('.<br/>
                    ○ Loop exactly 2 times.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match a character in the set [+-] atomically, optionally.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
                        ○ Match '%' atomically, optionally.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match ','.<br/>
                    ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match a character in the set [+-] atomically, optionally.<br/>
                    ○ Match a Unicode digit atomically at least once.<br/>
                    ○ Match '%' atomically, optionally.<br/>
                    ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match ')'.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Oo].<br/>
                    ○ Match a character in the set [Kk\u212A].<br/>
                    ○ Match a character in the set [Ll].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match '('.<br/>
                    ○ Loop exactly 2 times.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match a character in the set [+-] atomically, optionally.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
                        ○ Match '%' atomically, optionally.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match ','.<br/>
                    ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match a character in the set [+-] atomically, optionally.<br/>
                    ○ Match a Unicode digit atomically at least once.<br/>
                    ○ Match '%' atomically, optionally.<br/>
                    ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match ')'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.ColorValueValidator.StandardRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match '#'.<br/>
                    ○ Loop greedily at least 1 and at most 2 times.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 3 times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match a character in the set [Aa] atomically, optionally.<br/>
                    ○ Match '('.<br/>
                    ○ Loop exactly 2 times.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match a Unicode digit atomically at least once.<br/>
                        ○ Match '%' atomically, optionally.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match ','.<br/>
                    ○ Match a whitespace character atomically any number of times.<br/>
                    ○ Match a Unicode digit greedily at least once.<br/>
                    ○ Match '%' greedily, optionally.<br/>
                    ○ Match a whitespace character greedily any number of times.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match ','.<br/>
                        ○ Match a whitespace character atomically any number of times.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a Unicode digit greedily at least once.<br/>
                                ○ Optional (greedy).<br/>
                                    ○ Match '.'.<br/>
                                    ○ Match a Unicode digit greedily at least once.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '.'.<br/>
                                ○ Match a Unicode digit greedily at least once.<br/>
                    ○ Match ')'.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.CompositeValidator">
            <summary>
            组合验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.CompositeValidator.#ctor(Furion.Validation.ValidatorBase[])">
            <summary>
            构造函数
            </summary>
            <param name="validators">验证器集合</param>
        </member>
        <member name="M:Furion.Validation.CompositeValidator.#ctor(System.Collections.Generic.IList{Furion.Validation.ValidatorBase})">
            <summary>
            构造函数
            </summary>
            <param name="validators">验证器集合</param>
        </member>
        <member name="P:Furion.Validation.CompositeValidator.ValidatorCollection">
            <summary>
            验证器集合
            </summary>
        </member>
        <member name="P:Furion.Validation.CompositeValidator.Relationship">
            <inheritdoc cref="T:Furion.Validation.ValidatorRelationship" />
        </member>
        <member name="M:Furion.Validation.CompositeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.CompositeValidator.GetValidationResults(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.CompositeValidator.EnsureLegalData(System.Collections.Generic.IList{Furion.Validation.ValidatorBase})">
            <summary>
            合法数据检查
            </summary>
            <param name="validators">验证器集合</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:Furion.Validation.CustomValidator`1">
            <summary>
            自定义验证委托验证器
            </summary>
            <typeparam name="T">泛型类型</typeparam>
        </member>
        <member name="M:Furion.Validation.CustomValidator`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            构造函数
            </summary>
            <param name="predicate">验证委托</param>
        </member>
        <member name="T:Furion.Validation.CustomValidator">
            <summary>
            自定义验证委托验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.CustomValidator.#ctor(System.Func{System.Object,System.Boolean})">
            <summary>
            构造函数
            </summary>
            <param name="predicate">验证委托</param>
        </member>
        <member name="P:Furion.Validation.CustomValidator.Predicate">
            <summary>
            验证委托
            </summary>
        </member>
        <member name="M:Furion.Validation.CustomValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.DomainValidator">
            <summary>
            域名验证器
            </summary>
            <remarks>不包含协议，如 https/http</remarks>
        </member>
        <member name="M:Furion.Validation.DomainValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.DomainValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.DomainValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Loop greedily at least once.<br/>
                ○ 1st capture group.<br/>
                    ○ Match a character in the set [-0-9A-Za-z] atomically at least once.<br/>
                    ○ Match '.'.<br/>
            ○ 2nd capture group.<br/>
                ○ Match a character in the set [A-Za-z] atomically at least twice.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.EndsWithValidator">
            <summary>
            以特定字符串结尾的验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.EndsWithValidator.#ctor(System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="M:Furion.Validation.EndsWithValidator.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="P:Furion.Validation.EndsWithValidator.Value">
            <summary>
            检索值
            </summary>
        </member>
        <member name="P:Furion.Validation.EndsWithValidator.Comparison">
            <inheritdoc cref="T:System.StringComparison"/>
        </member>
        <member name="M:Furion.Validation.EndsWithValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.EndsWithValidator.GetDefaultMemberNames">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.IDCardNumberValidator">
            <summary>
            身份证号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IDCardNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.IDCardNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IDCardNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit exactly 6 times.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ 4th capture group.<br/>
                                    ○ 5th capture group.<br/>
                                        ○ 6th capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match the string "19".<br/>
                                                ○ Match the string "20".<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 7th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-2].<br/>
                                    ○ 8th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "30".<br/>
                                ○ 9th capture group.<br/>
                                    ○ 10th capture group.<br/>
                                        ○ 11th capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match the string "19".<br/>
                                                ○ Match the string "20".<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 12th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                    ○ Match the string "31".<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ 13th capture group.<br/>
                                        ○ 14th capture group.<br/>
                                            ○ Match with 2 alternative expressions.<br/>
                                                ○ Match the string "19".<br/>
                                                ○ Match the string "20".<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ Match the string "02".<br/>
                                    ○ 15th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                                ○ 16th capture group.<br/>
                                    ○ 17th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ 18th capture group.<br/>
                                                ○ 19th capture group.<br/>
                                                    ○ Match with 2 alternative expressions.<br/>
                                                        ○ Match the string "19".<br/>
                                                        ○ Match the string "20".<br/>
                                                ○ 20th capture group.<br/>
                                                    ○ Match with 3 alternative expressions.<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match a character in the set [13579].<br/>
                                                            ○ Match a character in the set [26].<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match a character in the set [2468].<br/>
                                                            ○ Match a character in the set [048].<br/>
                                                        ○ Match a sequence of expressions.<br/>
                                                            ○ Match '0'.<br/>
                                                            ○ Match a character in the set [48].<br/>
                                            ○ 21st capture group.<br/>
                                                ○ Match the string "2000".<br/>
                                    ○ Match the string "0229".<br/>
                        ○ Match a Unicode digit exactly 3 times.<br/>
                    ○ 22nd capture group.<br/>
                        ○ 23rd capture group.<br/>
                            ○ Match with 4 alternative expressions.<br/>
                                ○ 24th capture group.<br/>
                                    ○ 25th capture group.<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 26th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [0-2].<br/>
                                    ○ 27th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [12].<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match the string "30".<br/>
                                ○ 28th capture group.<br/>
                                    ○ 29th capture group.<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ 30th capture group.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [13578].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a character in the set [02].<br/>
                                    ○ Match the string "31".<br/>
                                ○ 31st capture group.<br/>
                                    ○ 32nd capture group.<br/>
                                        ○ Match a Unicode digit exactly 2 times.<br/>
                                    ○ Match the string "02".<br/>
                                    ○ 33rd capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [1-9].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '1'.<br/>
                                                ○ Match a Unicode digit.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '2'.<br/>
                                                ○ Match a character in the set [0-8].<br/>
                                ○ 34th capture group.<br/>
                                    ○ 35th capture group.<br/>
                                        ○ Match with 3 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [13579].<br/>
                                                ○ Match a character in the set [26].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [2468].<br/>
                                                ○ Match a character in the set [048].<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match '0'.<br/>
                                                ○ Match a character in the set [048].<br/>
                                    ○ Match the string "0229".<br/>
                        ○ Match a Unicode digit exactly 2 times.<br/>
            ○ 36th capture group.<br/>
                ○ Match a character in the set [Xx\d].<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.NotEmptyValidator">
            <summary>
            非空验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.NotEmptyValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.NotEmptyValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.ObjectAnnotationValidator">
            <summary>
            对象注解（特性）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator.GetValidationResults(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ObjectAnnotationValidator.TryValidate(System.Object,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            验证逻辑
            </summary>
            <param name="value">验证的值</param>
            <param name="validationResults"><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> 集合</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.Validation.PasswordValidator">
            <summary>
            密码验证器
            </summary>
            <remarks>
            密码长度为 6-18 位，包含至少一个字母和一个数字
            </remarks>
        </member>
        <member name="M:Furion.Validation.PasswordValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.PasswordValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PasswordValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match a character other than '\n' greedily any number of times.<br/>
                ○ Match a character in the set [A-Za-z].<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match a character other than '\n' greedily any number of times.<br/>
                ○ Match a Unicode digit.<br/>
            ○ Match a character other than '\n' greedily at least 6 and at most 18 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.PhoneNumberValidator">
            <summary>
            手机号验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PhoneNumberValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match '+'.<br/>
                    ○ Match the string "00".<br/>
                ○ Match the string "86".<br/>
            ○ Match '1'.<br/>
            ○ Match a character in the set [3-9].<br/>
            ○ Match a Unicode digit exactly 9 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.PostalCodeValidator">
            <summary>
            邮政编码验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PostalCodeValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 9 alternative expressions.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '0'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '1'.<br/>
                        ○ Match a character in the set [0-356].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '2'.<br/>
                        ○ Match a character in the set [0-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '3'.<br/>
                        ○ Match a character in the set [0-6].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '4'.<br/>
                        ○ Match a character in the set [0-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '5'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '6'.<br/>
                        ○ Match a character in the set [1-7].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '7'.<br/>
                        ○ Match a character in the set [0-5].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match '8'.<br/>
                        ○ Match a character in the set [013-6].<br/>
            ○ Match a Unicode digit exactly 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.PropertyAnnotationValidator`1">
            <summary>
            属性注解（特性）验证器
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            构造函数
            </summary>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="T:Furion.Validation.PropertyAnnotationValidator">
            <summary>
            属性注解（特性）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="P:Furion.Validation.PropertyAnnotationValidator.PropertyName">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator.GetValidationResults(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.PropertyAnnotationValidator.TryValidate(System.Object,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            验证逻辑
            </summary>
            <param name="value">验证的值</param>
            <param name="validationResults"><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> 集合</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Furion.Validation.SingleValidator">
            <summary>
            单个值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.SingleValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.SingleValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.StartsWithValidator">
            <summary>
            以特定字符串开头的验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.StartsWithValidator.#ctor(System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="M:Furion.Validation.StartsWithValidator.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="P:Furion.Validation.StartsWithValidator.Value">
            <summary>
            检索值
            </summary>
        </member>
        <member name="P:Furion.Validation.StartsWithValidator.Comparison">
            <inheritdoc cref="T:System.StringComparison"/>
        </member>
        <member name="M:Furion.Validation.StartsWithValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.StartsWithValidator.GetDefaultMemberNames">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.StringContainsValidator">
            <summary>
            包含特定字符串的验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.StringContainsValidator.#ctor(System.Char)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="M:Furion.Validation.StringContainsValidator.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">检索值</param>
        </member>
        <member name="P:Furion.Validation.StringContainsValidator.Value">
            <summary>
            检索值
            </summary>
        </member>
        <member name="P:Furion.Validation.StringContainsValidator.Comparison">
            <inheritdoc cref="T:System.StringComparison"/>
        </member>
        <member name="M:Furion.Validation.StringContainsValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.StringContainsValidator.GetDefaultMemberNames">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.StrongPasswordValidator">
            <summary>
            强类型密码验证器
            </summary>
            <remarks>
            密码长度最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符
            </remarks>
        </member>
        <member name="M:Furion.Validation.StrongPasswordValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.StrongPasswordValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.StrongPasswordValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match any character other than a whitespace character greedily any number of times.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character atomically at least 6 times.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a Unicode digit.<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [A-Z].<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [a-z].<br/>
            ○ Zero-width positive lookahead.<br/>
                ○ Match any character other than a whitespace character greedily any number of times.<br/>
                ○ Match a character in the set [ !#-&amp;*?@^].<br/>
            ○ Match any character other than a whitespace character atomically any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.TelephoneValidator">
            <summary>
            座机（电话）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.TelephoneValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.TelephoneValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.TelephoneValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a Unicode digit exactly 3 times.<br/>
                        ○ Match '-'.<br/>
                    ○ Match a Unicode digit exactly 8 times.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match a Unicode digit exactly 4 times.<br/>
                        ○ Match '-'.<br/>
                    ○ Match a Unicode digit greedily at least 7 and at most 8 times.<br/>
            ○ Optional (greedy).<br/>
                ○ Match '-'.<br/>
                ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.UserNameValidator">
            <summary>
            用户名验证器
            </summary>
            <remarks>
            长度 4-16 位，仅支持字母，数字，下划线，减号组合
            </remarks>
        </member>
        <member name="M:Furion.Validation.UserNameValidator.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.UserNameValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.UserNameValidator.Regex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-0-9A-Z_a-z] atomically at least 4 and at most 16 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ValidatorBase">
            <summary>
            验证器抽象基类
            </summary>
        </member>
        <member name="F:Furion.Validation.ValidatorBase._errorMessageResourceAccessor">
            <summary>
            错误消息资源访问器
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.#ctor(System.Func{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="errorMessageAccessor">错误消息资源访问器</param>
        </member>
        <member name="P:Furion.Validation.ValidatorBase.ErrorMessageString">
            <summary>
            默认错误消息
            </summary>
        </member>
        <member name="P:Furion.Validation.ValidatorBase.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.IsValid(System.Object)">
            <summary>
            检查值有效性
            </summary>
            <param name="value">验证的值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.GetValidationResults(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取验证结果
            </summary>
            <param name="value">验证的值</param>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.GetValidationResult(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取验证结果
            </summary>
            <param name="value">验证的值</param>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.GetDefaultMemberNames">
            <summary>
            默认成员名称集合
            </summary>
            <returns><see cref="T:System.String"/>[]</returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.FormatErrorMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            格式化错误消息
            </summary>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.Validate(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            执行验证
            </summary>
            <param name="value">验证的值</param>
            <param name="memberNames">成员名称集合</param>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException"></exception>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.StringFormat(System.String,System.Object[])">
            <summary>
            格式化字符串
            </summary>
            <param name="format">字符串</param>
            <param name="args">格式化参数</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.PlaceholderRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ Match '0' through '9' atomically at least once.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.ValidatorBase.SpacesRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match a whitespace character atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ValueAnnotationValidator">
            <summary>
            单个值注解（特性）验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.#ctor(System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            构造函数
            </summary>
            <param name="validationAttributes">验证特性集合</param>
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            构造函数
            </summary>
            <param name="validationAttributes">验证特性集合</param>
        </member>
        <member name="P:Furion.Validation.ValueAnnotationValidator.Attributes">
            <summary>
            验证特性集合
            </summary>
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.GetValidationResults(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ValueAnnotationValidator.TryValidate(System.Object,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult}@,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            验证逻辑
            </summary>
            <param name="value">验证的值</param>
            <param name="validationResults"><see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> 集合</param>
            <param name="memberNames">成员名称集合</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
    </members>
</doc>
