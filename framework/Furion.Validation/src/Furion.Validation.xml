<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Validation</name>
    </assembly>
    <members>
        <member name="T:System.ComponentModel.DataAnnotations.ColorValueAttribute">
            <summary>
            颜色值验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ColorValueAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.ColorValueAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.IMEIAttributeAttribute">
            <summary>
            手机机身码验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IMEIAttributeAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.IMEIAttributeAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.TrainNumberAttribute">
            <summary>
            火车车次验证特性
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TrainNumberAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.TrainNumberAttribute.IsValid(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ColorRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ColorRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ColorRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ColorRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ED2KLinkRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ED2KLinkRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IMEIRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the IMEIRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.IMEIRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IMEIRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.IMEIRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.IMEIRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the MagnetLinkRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.MagnetLinkRegex_3.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the SubnetMaskRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.SubnetMaskRegex_4.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the ThunderLinkRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.ThunderLinkRegex_5.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlRegex_6">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UrlRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UrlRegex_6.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_6.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlRegex_6.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_6.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlRegex_6.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_6.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_6.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlRegex_6.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UrlWithPortRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UrlWithPortRegex_7.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.USCIStrictRegex_8">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the USCIStrictRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.USCIStrictRegex_8.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_8.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.USCIStrictRegex_8.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_8.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.USCIStrictRegex_8.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_8.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_8.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.USCIStrictRegex_8.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiHexDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFabcdef".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_ascii_34020000000000000000">
            <summary>Supports searching for characters in or not in "2459".</summary>
        </member>
        <member name="T:Furion.Validation.ColorValueValidation">
            <summary>
            颜色值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ColorValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ColorValueValidation.ColorRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 3 alternative expressions, atomically.<br/>
                ○ 1st capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match '#'.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 6 times.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 3 times.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match '('.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 5th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 6th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ')'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
                ○ 7th capture group.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ Match a character in the set [Rr].<br/>
                    ○ Match a character in the set [Gg].<br/>
                    ○ Match a character in the set [Bb].<br/>
                    ○ Match a character in the set [Aa].<br/>
                    ○ Match '('.<br/>
                    ○ 8th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 9th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 10th capture group.<br/>
                        ○ Match with 5 alternative expressions.<br/>
                            ○ Match '0' through '9'.<br/>
                            ○ Match '0' through '9' exactly 2 times.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match the string "25".<br/>
                                ○ Match a character in the set [0-5].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match a character in the set [0-4].<br/>
                                ○ Match '0' through '9'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [01].<br/>
                                ○ Match '0' through '9' exactly 2 times.<br/>
                    ○ Match ','.<br/>
                    ○ 11th capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match an empty string.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match any character other than '\n'.<br/>
                                        ○ Match '0'.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '0'.<br/>
                                ○ Match any character other than '\n'.<br/>
                                ○ Match '0' through '9'.<br/>
                    ○ Match ')'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ED2KLinkValueValidation">
            <summary>
            ed2k 链接值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ED2KLinkValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ED2KLinkValueValidation.ED2KLinkRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "ed2k://|file|".<br/>
            ○ Match a character other than '\n' greedily at least once.<br/>
            ○ Match the string "|/".<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.IMEIValueValidation">
            <summary>
            手机机身码值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.IMEIValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.IMEIValueValidation.IMEIRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a Unicode digit atomically at least 15 and at most 17 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.MagnetLinkValueValidation">
            <summary>
            磁力链接值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.MagnetLinkValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.MagnetLinkValueValidation.MagnetLinkRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match the string "magnet:?xt=urn:btih:".<br/>
            ○ Match a character in the set [0-9A-Fa-f] greedily at least 40 times.<br/>
            ○ Match a character other than '\n' greedily any number of times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.NotEmptyValueValidation">
            <summary>
            非空值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.NotEmptyValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.RequiredValueValidation">
            <summary>
            必填值验证器
            </summary>
        </member>
        <member name="P:Furion.Validation.RequiredValueValidation.AllowEmptyStrings">
            <summary>
            是否允许空字符串
            </summary>
        </member>
        <member name="M:Furion.Validation.RequiredValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Furion.Validation.SubnetMaskValueValidation">
            <summary>
            子网掩码值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.SubnetMaskValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.SubnetMaskValueValidation.SubnetMaskRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match with 4 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match if at the beginning of the string.<br/>
                    ○ 1st capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                    ○ Match the string ".0.0.0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.".<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match the string ".0.0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.255.".<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [24].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match the string ".0".<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "255.255.255.".<br/>
                    ○ 4th capture group.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '2'.<br/>
                                ○ Match with 3 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '5'.<br/>
                                        ○ Match a character in the set [245].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '4'.<br/>
                                        ○ Match a character in the set [08].<br/>
                                    ○ Match the string "24".<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '1'.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match the string "92".<br/>
                                    ○ Match the string "28".<br/>
                            ○ Match '0'.<br/>
                    ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ThunderLinkValueValidation">
            <summary>
            迅雷链接值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.ThunderLinkValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.ThunderLinkValueValidation.ThunderLinkRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9CDGKLPSTX-Z].<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.TrainNumberValueValidation">
            <summary>
            火车车次值验证器
            </summary>
        </member>
        <member name="M:Furion.Validation.TrainNumberValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.TrainNumberValueValidation.TrainNumberRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [1-9CDGKLPSTX-Z].<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 4 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.UrlValueValidation">
            <summary>
            网址值验证器
            </summary>
        </member>
        <member name="P:Furion.Validation.UrlValueValidation.WithPort">
            <summary>
            带端口号
            </summary>
        </member>
        <member name="M:Furion.Validation.UrlValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.UrlValueValidation.UrlRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ 3rd capture group.<br/>
                            ○ Match with 2 alternative expressions.<br/>
                                ○ Match the string "ht".<br/>
                                ○ Match 'f'.<br/>
                        ○ Match the string "tp".<br/>
                        ○ Match 's' atomically, optionally.<br/>
                    ○ Match the string "://".<br/>
            ○ Loop greedily at least once.<br/>
                ○ 4th capture group.<br/>
                    ○ Match a character in the set [^!#-&amp;*-.?@^\s].<br/>
                    ○ Optional (greedy).<br/>
                        ○ 5th capture group.<br/>
                            ○ Match a character in the set [^!#-&amp;*.?@^\s] greedily at least 1 and at most 64 times.<br/>
                    ○ Match '.'.<br/>
            ○ Match a character in the set [a-z] atomically at least 2 and at most 6 times.<br/>
            ○ Match '/' atomically, optionally.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.UrlValueValidation.UrlWithPortRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Optional (greedy).<br/>
                ○ 1st capture group.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match the string "ht".<br/>
                            ○ Match 'f'.<br/>
                    ○ Match the string "tp".<br/>
                    ○ Match 's' atomically, optionally.<br/>
                    ○ Match the string "://".<br/>
            ○ Match a character in the set [-\w] atomically at least once.<br/>
            ○ Loop greedily at least once.<br/>
                ○ 3rd capture group.<br/>
                    ○ Match '.'.<br/>
                    ○ Match a character in the set [-\w] atomically at least once.<br/>
            ○ Match ':'.<br/>
            ○ Match a Unicode digit atomically at least 1 and at most 5 times.<br/>
            ○ Match '/' atomically, optionally.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.USCIValueValidation">
            <summary>
            统一社会信用代码值验证器
            </summary>
        </member>
        <member name="P:Furion.Validation.USCIValueValidation.Strict">
            <summary>
            严格模式
            </summary>
        </member>
        <member name="M:Furion.Validation.USCIValueValidation.Validate(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Furion.Validation.USCIValueValidation.USCIStrictRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 15 times.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 18 times.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 20 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Furion.Validation.USCIValueValidation.USCIRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 3 alternative expressions.<br/>
                    ○ 2nd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 15 times.<br/>
                    ○ 3rd capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 18 times.<br/>
                    ○ 4th capture group.<br/>
                        ○ Match a character in the set [0-9A-Za-z] exactly 20 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Furion.Validation.ValueValidationBase">
            <summary>
            值验证器抽象基类
            </summary>
        </member>
        <member name="M:Furion.Validation.ValueValidationBase.IsValid(System.Object)">
            <summary>
            验证值有效性
            </summary>
            <param name="value">待验证的值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Furion.Validation.ValueValidationBase.Validate(System.Object)">
            <summary>
            验证逻辑
            </summary>
            <param name="value">待验证的值</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
    </members>
</doc>
