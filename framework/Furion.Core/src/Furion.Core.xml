<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Core</name>
    </assembly>
    <members>
        <member name="T:Furion.Constants">
            <summary>
            核心模块常量配置
            </summary>
        </member>
        <member name="F:Furion.Constants.NUGET_PACKAGE_PAGE">
            <summary>
            NuGet 包主页地址
            </summary>
        </member>
        <member name="F:Furion.Constants.FURION_COMPONENT_DOCS_PAGE">
            <summary>
            Furion 组件文档地址
            </summary>
        </member>
        <member name="T:Furion.Core.EnumExtensions">
            <summary>
            枚举拓展类
            </summary>
        </member>
        <member name="M:Furion.Core.EnumExtensions.GetEnumDescription(System.Object)">
            <summary>
            获取枚举值描述
            </summary>
            <param name="enumValue">枚举值</param>
            <returns><see cref="T:System.String"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Furion.ComponentMetadata">
            <summary>
            组件元数据
            </summary>
        </member>
        <member name="M:Furion.ComponentMetadata.#ctor(System.String,System.Version,System.String)">
            <summary>
            <inheritdoc cref="T:Furion.ComponentMetadata" />
            </summary>
            <param name="name">组件名称</param>
            <param name="version">版本号</param>
            <param name="description">描述</param>
        </member>
        <member name="P:Furion.ComponentMetadata.Name">
            <summary>
            组件名称
            </summary>
        </member>
        <member name="P:Furion.ComponentMetadata.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Furion.ComponentMetadata.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Furion.ComponentMetadata.NuGetPage">
            <summary>
            NuGet 地址
            </summary>
        </member>
        <member name="P:Furion.ComponentMetadata.DocumentationPage">
            <summary>
            文档地址
            </summary>
        </member>
        <member name="T:Furion.CoreOptions">
            <summary>
            核心模块选项
            </summary>
        </member>
        <member name="F:Furion.CoreOptions._optionsInstances">
            <summary>
            子选项集合
            </summary>
        </member>
        <member name="F:Furion.CoreOptions._metadataOfRegistered">
            <summary>
            已注册的组件元数据集合
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.#ctor">
            <summary>
            <inheritdoc cref="T:Furion.CoreOptions"/>
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.GetOrAdd``1">
            <summary>
            获取子选项
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <returns><typeparamref name="TOptions"/></returns>
        </member>
        <member name="M:Furion.CoreOptions.Remove``1">
            <summary>
            移除子选项
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
        <member name="M:Furion.CoreOptions.TryRegisterComponent(Furion.ComponentMetadata)">
            <summary>
            登记组件注册信息
            </summary>
            <param name="metadata"><see cref="T:Furion.ComponentMetadata"/></param>
        </member>
        <member name="T:System.Debugging">
            <summary>
            向事件管理器中输出事件信息
            </summary>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String)">
            <summary>
            输出一行事件信息
            </summary>
            <param name="level">
            <para>信息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String,System.Object[])">
            <summary>
            输出一行事件信息
            </summary>
            <param name="level">
            <para>信息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String)">
            <summary>
            输出跟踪级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String,System.Object[])">
            <summary>
            输出跟踪级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Info(System.String)">
            <summary>
            输出信息级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Info(System.String,System.Object[])">
            <summary>
            输出信息级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String)">
            <summary>
            输出警告级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String,System.Object[])">
            <summary>
            输出警告级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Error(System.String)">
            <summary>
            输出错误级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Error(System.String,System.Object[])">
            <summary>
            输出错误级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.File(System.String)">
            <summary>
            输出文件级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.File(System.String,System.Object[])">
            <summary>
            输出文件级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Tip(System.String)">
            <summary>
            输出提示级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Tip(System.String,System.Object[])">
            <summary>
            输出提示级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Search(System.String)">
            <summary>
            输出搜索级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Search(System.String,System.Object[])">
            <summary>
            输出搜索级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Clock(System.String)">
            <summary>
            输出时钟级别事件信息
            </summary>
            <param name="message">事件信息</param>
        </member>
        <member name="M:System.Debugging.Clock(System.String,System.Object[])">
            <summary>
            输出时钟级别事件信息
            </summary>
            <param name="message">事件信息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.GetLevelEmoji(System.Int32)">
            <summary>
            获取信息级别对应的 emoji
            </summary>
            <param name="level">
            <para>信息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            获取所有类型
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <param name="exported">类型导出设置</param>
            <returns><see cref="T:System.Type"/>[]</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetDescription(System.Reflection.Assembly)">
            <summary>
            获取程序集描述
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集版本
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:System.Collections.Concurrent.ConcurrentDictionaryExtensions">
            <summary>
            <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Collections.Concurrent.ConcurrentDictionaryExtensions.TryUpdate``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0,System.Func{``1,``1},``1@)">
            <summary>
            根据字典键更新对应的值
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/></param>
            <param name="key"><typeparamref name="TKey"/></param>
            <param name="updateFactory">自定义更新委托</param>
            <param name="value"><typeparamref name="TValue"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:System.Collections.Generic.ICollectionExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            判断集合是否为空
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="collection"><see cref="T:System.Collections.Generic.ICollection`1"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:System.Collections.Generic.IDictionaryExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.IDictionary`2"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="key"><typeparamref name="TKey"/></param>
            <param name="value"><typeparamref name="TValue"/></param>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}})">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="concatDictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
        </member>
        <member name="T:System.Linq.Expressions.LinqExpressionExtensions">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.LinqExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            解析表达式属性名称
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertySelector"><see cref="T:System.Linq.Expressions.Expression`1"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Linq.Expressions.LinqExpressionExtensions.GetPropertyName``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            解析表达式属性名称
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="memberExpression"><see cref="T:System.Linq.Expressions.MemberExpression"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:System.ObjectExtensions">
            <summary>
            <see cref="T:System.Object"/> 拓展类
            </summary>
        </member>
        <member name="M:System.ObjectExtensions.TryGetCount(System.Object,System.Int32@)">
            <summary>
            尝试获取对象的数量
            </summary>
            <param name="obj"><see cref="T:System.Object"/></param>
            <param name="count">数量</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            <see cref="T:System.Type"/> 拓展类
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsStatic(System.Type)">
            <summary>
            检查类型是否是静态类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsAnonymous(System.Type)">
            <summary>
            检查类型是否是匿名类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsInstantiable(System.Type)">
            <summary>
            检查类型是否可实例化
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsAlienAssignableTo(System.Type,System.Type)">
            <summary>
            检查类型是否派生自指定类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="fromType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetDefinedCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取指定特性实例
            </summary>
            <remarks>若特性不存在则返回 null</remarks>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="inherit">是否查找基类型特性</param>
            <returns><typeparamref name="TAttribute"/></returns>
        </member>
        <member name="M:System.TypeExtensions.HasDefinePublicParameterlessConstructor(System.Type)">
            <summary>
            检查类型是否定义了公开无参构造函数
            </summary>
            <remarks>用于 <see cref="M:System.Activator.CreateInstance(System.Type)"/> 实例化</remarks>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsDefinitionEqual(System.Type,System.Type)">
            <summary>
            检查类型和指定类型定义是否相等
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="compareType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsCompatibilityTo(System.Type,System.Type)">
            <summary>
            检查类型和指定继承类型是否兼容
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="inheritType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsDeclarationMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.MethodInfo@)">
            <summary>
            检查类型是否定义了指定方法
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="name">方法名称</param>
            <param name="accessibilityBindingFlags">可访问性成员绑定标记</param>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsInteger(System.Type)">
            <summary>
            检查类型是否是整数类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsDecimal(System.Type)">
            <summary>
            检查类型是否是小数类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            检查类型是否是数值类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.CreatePropertySetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建属性值设置器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="propertyInfo"><see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns><see cref="T:System.Action`2"/></returns>
        </member>
        <member name="M:System.TypeExtensions.CreateFieldSetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建字段值设置器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="fieldInfo"><see cref="T:System.Reflection.FieldInfo"/></param>
            <returns><see cref="T:System.Action`2"/></returns>
        </member>
        <member name="M:System.TypeExtensions.CreatePropertyGetter(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            创建属性值访问器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="propertyInfo"><see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns><see cref="T:System.Func`2"/></returns>
        </member>
        <member name="M:System.TypeExtensions.CreateFieldGetter(System.Type,System.Reflection.FieldInfo)">
            <summary>
            创建字段值访问器
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="fieldInfo"><see cref="T:System.Reflection.FieldInfo"/></param>
            <returns><see cref="T:System.Func`2"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions">
            <summary>
            核心模块 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.AddCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加核心模块选项服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.GetCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            获取核心模块选项
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Furion.CoreOptions"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.RegisterComponent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            登记组件注册信息
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.RegisterComponent(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            登记组件注册信息
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <param name="typeInAssembly"><see cref="T:System.Type"/></param>
        </member>
    </members>
</doc>
