<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Core</name>
    </assembly>
    <members>
        <member name="T:System.Debugging">
            <summary>
            向事件管理器中输出事件消息
            </summary>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String)">
            <summary>
            输出一行事件消息
            </summary>
            <param name="level">
            <para>消息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String,System.Object[])">
            <summary>
            输出一行事件消息
            </summary>
            <param name="level">
            <para>消息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String)">
            <summary>
            输出跟踪级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String,System.Object[])">
            <summary>
            输出跟踪级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Info(System.String)">
            <summary>
            输出信息级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Info(System.String,System.Object[])">
            <summary>
            输出信息级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String)">
            <summary>
            输出警告级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String,System.Object[])">
            <summary>
            输出警告级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Error(System.String)">
            <summary>
            输出错误级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Error(System.String,System.Object[])">
            <summary>
            输出错误级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.File(System.String)">
            <summary>
            输出文件级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.File(System.String,System.Object[])">
            <summary>
            输出文件级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Tip(System.String)">
            <summary>
            输出提示级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Tip(System.String,System.Object[])">
            <summary>
            输出提示级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Search(System.String)">
            <summary>
            输出搜索级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Search(System.String,System.Object[])">
            <summary>
            输出搜索级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Clock(System.String)">
            <summary>
            输出时钟级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Clock(System.String,System.Object[])">
            <summary>
            输出时钟级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.GetLevelEmoji(System.Int32)">
            <summary>
            获取消息级别对应的 emoji
            </summary>
            <param name="level">
            <para>消息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            <item>
            <description>文件</description>
            </item>
            <item>
            <description>提示</description>
            </item>
            <item>
            <description>搜索</description>
            </item>
            <item>
            <description>时钟</description>
            </item>
            </list>
            </param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:System.Reflection.AssemblyExtensions">
            <summary>
            <see cref="T:System.Reflection.Assembly"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            获取所有类型
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <param name="exported">类型导出设置</param>
            <returns><see cref="T:System.Type"/>[]</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtensions.GetInstantiableTypes(System.Reflection.Assembly,System.Boolean)">
            <summary>
            获取所有可实例化类型
            </summary>
            <param name="assembly"><see cref="T:System.Reflection.Assembly"/></param>
            <param name="exported">类型导出设置</param>
            <returns><see cref="T:System.Type"/>[]</returns>
        </member>
        <member name="T:System.Linq.Expressions.ExpressionExtensions">
            <summary>
            <see cref="T:System.Linq.Expressions.Expression"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            解析表达式属性名称
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <param name="propertySelector">属性选择器</param>
            <returns><see cref="T:System.String"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionExtensions.GetPropertyName``1(System.Linq.Expressions.MemberExpression)">
            <summary>
            解析表达式属性名称
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="memberExpression"><see cref="T:System.Linq.Expressions.MemberExpression"/></param>
            <returns><see cref="T:System.String"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:System.Collections.Generic.ICollectionExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ICollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            判断集合是否为空
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="collection"><see cref="T:System.Collections.Generic.ICollection`1"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:System.Collections.Generic.IDictionaryExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.IDictionary`2"/> 拓展类
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="key">字典键</param>
            <param name="value">字典值</param>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}})">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="concatDictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
        </member>
        <member name="T:System.ObjectExtensions">
            <summary>
            <see cref="T:System.Object"/> 拓展类
            </summary>
        </member>
        <member name="M:System.ObjectExtensions.TryGetCount(System.Object,System.Int32@)">
            <summary>
            尝试获取对象的数量
            </summary>
            <param name="obj">对象</param>
            <param name="count">数量</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            <see cref="T:System.Type"/> 拓展类
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsStatic(System.Type)">
            <summary>
            是否为静态类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            是否为匿名类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsInstantiable(System.Type)">
            <summary>
            是否可实例化
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsAlienAssignableTo(System.Type,System.Type)">
            <summary>
            是否派生自特定类型
            </summary>
            <remarks>排除特定类型本身</remarks>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="fromType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetDefinedCustomAttribute``1(System.Type,System.Boolean)">
            <summary>
            获取指定特性实例
            </summary>
            <remarks>若特性不存在则返回 null</remarks>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="inherit">是否查找基类型特性</param>
            <returns><typeparamref name="TAttribute"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsMultipleSameDefined(System.Type,System.Type,System.Boolean)">
            <summary>
            是否定义多个相同的特性
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="attributeType"><see cref="T:System.Attribute"/></param>
            <param name="inherit">是否查找基类型特性</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetDefinedCustomAttributeOrNew``1(System.Type,System.Boolean)">
            <summary>
            获取指定特性实例
            </summary>
            <remarks>若特性不存在则返回默认实例</remarks>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="inherit">是否查找基类型特性</param>
            <returns><typeparamref name="TAttribute"/></returns>
        </member>
        <member name="M:System.TypeExtensions.HasParameterlessConstructorDefined(System.Type)">
            <summary>
            是否包含公开无参构造函数
            </summary>
            <remarks>用于 <see cref="M:System.Activator.CreateInstance(System.Type)"/> 实例化</remarks>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsEqualTypeDefinition(System.Type,System.Type)">
            <summary>
            类型定义是否相等
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="compareType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsTypeCompatibilityTo(System.Type,System.Type)">
            <summary>
            类型是否兼容
            </summary>
            <remarks>检查泛型定义参数</remarks>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="baseType"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsDeclareOnlyMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Reflection.MethodInfo@)">
            <summary>
            是否定义了指定方法
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="name">方法名称</param>
            <param name="accessibilityBindingFlags">可访问性成员绑定标记</param>
            <param name="methodInfo"><see cref="T:System.Reflection.MethodInfo"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsInteger(System.Type)">
            <summary>
            是否为整数类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsDecimal(System.Type)">
            <summary>
            是否为小数类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            是否为数值类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions">
            <summary>
            核心模块 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.AddCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加核心模块选项服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.GetCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            获取核心模块选项
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Furion.CoreOptions"/></returns>
        </member>
        <member name="T:Furion.CoreOptions">
            <summary>
            核心模块选项
            </summary>
        </member>
        <member name="F:Furion.CoreOptions._optionsInstances">
            <summary>
            子选项实例集合
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.Get``1">
            <summary>
            获取子选项实例
            </summary>
            <remarks>若子选项实例不存在则添加</remarks>
            <typeparam name="TOptions">选项类型</typeparam>
            <returns><typeparamref name="TOptions"/></returns>
        </member>
        <member name="M:Furion.CoreOptions.Remove``1">
            <summary>
            移除子选项实例
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
        </member>
    </members>
</doc>
