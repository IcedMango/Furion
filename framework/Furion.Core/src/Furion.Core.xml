<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Core</name>
    </assembly>
    <members>
        <member name="T:System.Debugging">
            <summary>
            向事件管理器中输出事件消息
            </summary>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String)">
            <summary>
            输出一行事件消息
            </summary>
            <param name="level">
            <para>消息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            </list>
            </param>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String,System.Object[])">
            <summary>
            输出一行事件消息
            </summary>
            <param name="level">
            <para>消息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            </list>
            </param>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String)">
            <summary>
            输出跟踪级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String,System.Object[])">
            <summary>
            输出跟踪级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Info(System.String)">
            <summary>
            输出信息级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Info(System.String,System.Object[])">
            <summary>
            输出信息级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String)">
            <summary>
            输出警告级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String,System.Object[])">
            <summary>
            输出警告级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Error(System.String)">
            <summary>
            输出错误级别事件消息
            </summary>
            <param name="message">事件消息</param>
        </member>
        <member name="M:System.Debugging.Error(System.String,System.Object[])">
            <summary>
            输出错误级别事件消息
            </summary>
            <param name="message">事件消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.GetLevelEmoji(System.Int32)">
            <summary>
            获取消息级别对应的 emoji
            </summary>
            <param name="level">
            <para>消息级别</para>
            <list type="number">
            <item>
            <description>跟踪</description>
            </item>
            <item>
            <description>信息</description>
            </item>
            <item>
            <description>警告</description>
            </item>
            <item>
            <description>错误</description>
            </item>
            </list>
            </param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="T:System.Collections.Generic.IDictionaryExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.IDictionary`2"/> 类型拓展
            </summary>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="key">字典键</param>
            <param name="value">字典值</param>
        </member>
        <member name="M:System.Collections.Generic.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}})">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典键类型</typeparam>
            <typeparam name="TValue">字典值类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <param name="concatDictionary"><see cref="T:System.Collections.Generic.IDictionary`2"/></param>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            <see cref="T:System.Type"/> 类型拓展
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsStatic(System.Type)">
            <summary>
            判断类型是否是静态类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see langword="true"/> 标识为静态类型；<see langword="false"/> 标识为非静态类</returns>
        </member>
        <member name="M:System.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            判断类型是否是匿名类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsInstantiatedType(System.Type)">
            <summary>
            判断类型是否可实例化
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsInstantiatedTypeWithAssignableFrom(System.Type,System.Type)">
            <summary>
            判断类型是否可实例化且派生自特定类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="derivedType">派生类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetCustomAttributeIfIsDefined``1(System.Type,System.Boolean)">
            <summary>
            获取类型指定的特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="inherit">是否支持特性继承查找</param>
            <returns><typeparamref name="TAttribute"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetPublicInstanceMethod(System.Type,System.String)">
            <summary>
            获取公开的实例方法
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="name">方法名称</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetParentAndSelfTypes(System.Type)">
            <summary>
            查找所有的父类类型且包含自己
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsDefinedParameterlessConstructor(System.Type)">
            <summary>
            是否定义公开无参构造函数
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions">
            <summary>
            核心模块 <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.AddCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加核心模块选项服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.GetCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            获取核心模块选项
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Furion.CoreOptions"/></returns>
        </member>
        <member name="T:Furion.CoreOptions">
            <summary>
            核心模块选项
            </summary>
        </member>
        <member name="F:Furion.CoreOptions._optionsInstances">
            <summary>
            子选项实例集合
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.Get``1">
            <summary>
            获取子选项实例
            </summary>
            <remarks>若子选项实例不存在则添加</remarks>
            <typeparam name="TOptions">选项类型</typeparam>
            <returns><typeparamref name="TOptions"/></returns>
        </member>
    </members>
</doc>
