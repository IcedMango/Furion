<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Core</name>
    </assembly>
    <members>
        <member name="T:System.Debugging">
            <summary>
            内部调试事件消息
            </summary>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String)">
            <summary>
            输出一行消息
            </summary>
            <param name="level">调试级别：1/跟踪；2/信息；3/警告；4/错误</param>
            <param name="message">消息</param>
        </member>
        <member name="M:System.Debugging.WriteLine(System.Int32,System.String,System.Object[])">
            <summary>
            输出一行消息
            </summary>
            <param name="level">调试级别：1/信息；2/警告；3/错误</param>
            <param name="message">消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String)">
            <summary>
            输出跟踪消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:System.Debugging.Trace(System.String,System.Object[])">
            <summary>
            输出跟踪消息
            </summary>
            <param name="message">消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Info(System.String)">
            <summary>
            输出信息消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:System.Debugging.Info(System.String,System.Object[])">
            <summary>
            输出信息消息
            </summary>
            <param name="message">消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String)">
            <summary>
            输出警告消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:System.Debugging.Warn(System.String,System.Object[])">
            <summary>
            输出警告消息
            </summary>
            <param name="message">消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:System.Debugging.Error(System.String)">
            <summary>
            输出错误消息
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="M:System.Debugging.Error(System.String,System.Object[])">
            <summary>
            输出错误消息
            </summary>
            <param name="message">消息</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="T:System.Diagnostics.DiagnosticSourceExtensions">
            <summary>
            <see cref="T:System.Diagnostics.DiagnosticSource"/> 类型拓展
            </summary>
        </member>
        <member name="M:System.Diagnostics.DiagnosticSourceExtensions.WriteIsEnabled(System.Diagnostics.DiagnosticSource,System.String,System.Object)">
            <summary>
            写入事件
            </summary>
            <param name="diagnosticSource"><see cref="T:System.Diagnostics.DiagnosticSource"/></param>
            <param name="name">事件名</param>
            <param name="value">负载数据</param>
        </member>
        <member name="T:System.Collections.Generic.DictionaryExtensions">
            <summary>
            <see cref="T:System.Collections.Generic.Dictionary`2"/> 类型拓展
            </summary>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典 Key 类型</typeparam>
            <typeparam name="TValue">字典 Value 类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.Dictionary`2"/></param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:System.Collections.Generic.DictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}})">
            <summary>
            添加或更新
            </summary>
            <typeparam name="TKey">字典 Key 类型</typeparam>
            <typeparam name="TValue">字典 Value 类型</typeparam>
            <param name="dictionary"><see cref="T:System.Collections.Generic.Dictionary`2"/></param>
            <param name="otherDictionary"><see cref="T:System.Collections.Generic.Dictionary`2"/></param>
        </member>
        <member name="T:System.TypeExtensions">
            <summary>
            <see cref="T:System.Type"/> 类型拓展
            </summary>
        </member>
        <member name="M:System.TypeExtensions.IsStatic(System.Type)">
            <summary>
            判断类型是否是静态类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see langword="true"/> 标识为静态类型；<see langword="false"/> 标识为非静态类</returns>
        </member>
        <member name="M:System.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            判断类型是否是匿名类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsInstantiatedType(System.Type)">
            <summary>
            判断类型是否可实例化
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsInstantiatedTypeWithAssignableFrom(System.Type,System.Type)">
            <summary>
            判断类型是否可实例化且派生自特定类型
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="derivedType">派生类型</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetCustomAttributeIfIsDefined``1(System.Type,System.Boolean)">
            <summary>
            获取类型指定的特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="inherit">是否支持特性继承查找</param>
            <returns><typeparamref name="TAttribute"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetPublicInstanceMethod(System.Type,System.String)">
            <summary>
            获取公开的实例方法
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <param name="name">方法名称</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/></returns>
        </member>
        <member name="M:System.TypeExtensions.GetParentAndSelfTypes(System.Type)">
            <summary>
            查找所有的父类类型且包含自己
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Collections.Generic.List`1"/></returns>
        </member>
        <member name="M:System.TypeExtensions.IsDefinedParameterlessConstructor(System.Type)">
            <summary>
            是否定义公开无参构造函数
            </summary>
            <param name="type"><see cref="T:System.Type"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions">
            <summary>
            核心模块拓展
            </summary>
            <remarks>限制框架内置模块使用</remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.AddCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            添加核心模块选项服务
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.CoreServiceCollectionExtensions.GetCoreOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            获取核心模块选项
            </summary>
            <param name="services"><see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></param>
            <returns><see cref="T:Furion.CoreOptions"/></returns>
        </member>
        <member name="T:Furion.CoreOptions">
            <summary>
            框架核心选项
            </summary>
            <remarks>负责全局数据存储</remarks>
        </member>
        <member name="F:Furion.CoreOptions._optionsInstances">
            <summary>
            选项实例字典
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.CoreOptions.Get``1">
            <summary>
            获取选项实例
            </summary>
            <typeparam name="TOptions">选项类型</typeparam>
            <returns><typeparamref name="TOptions"/></returns>
        </member>
    </members>
</doc>
