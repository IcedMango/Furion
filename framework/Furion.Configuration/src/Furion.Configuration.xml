<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Furion.Configuration</name>
    </assembly>
    <members>
        <member name="T:Furion.Component.ConfigurationComponent">
            <summary>
            配置模块服务组件
            </summary>
        </member>
        <member name="T:Furion.Configuration.FileConfigurationProvider">
            <summary>
            文件配置提供器
            </summary>
        </member>
        <member name="F:Furion.Configuration.FileConfigurationProvider._parsers">
            <summary>
            文件拓展名解析器
            </summary>
        </member>
        <member name="F:Furion.Configuration.FileConfigurationProvider._sourceTypes">
            <summary>
            文件拓展名配置源
            </summary>
        </member>
        <member name="F:Furion.Configuration.FileConfigurationProvider._jsonParser">
            <summary>
            JSON 文件解析器
            </summary>
        </member>
        <member name="M:Furion.Configuration.FileConfigurationProvider.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Furion.Configuration.FileConfigurationProvider.AddParser(System.String,System.Func{System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>
            添加文件拓展名解析器
            </summary>
            <param name="extension">文件拓展名</param>
            <param name="parser"><see cref="T:System.Func`2"/></param>
        </member>
        <member name="M:Furion.Configuration.FileConfigurationProvider.AddSource(System.String,System.Type)">
            <summary>
            添加文件拓展名配置源
            </summary>
            <param name="extension">文件拓展名</param>
            <param name="sourceType">实现 <see cref="T:Microsoft.Extensions.Configuration.FileConfigurationSource"/> 的类型</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Furion.Configuration.FileConfigurationProvider.CreateSourceInstance(System.String,System.Action{Microsoft.Extensions.Configuration.FileConfigurationSource})">
            <summary>
            创建文件拓展名配置源对象
            </summary>
            <param name="extension">文件拓展名</param>
            <param name="configure">自定义配置委托</param>
            <returns><see cref="T:Microsoft.Extensions.Configuration.FileConfigurationSource"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.Configuration.FileConfigurationProvider.Parse(System.String,System.IO.Stream)">
            <summary>
            解析指定文件拓展名内容并返回字典集合
            </summary>
            <param name="extension">文件拓展名</param>
            <param name="stream"><see cref="T:System.IO.Stream"/></param>
            <returns><see cref="T:System.Collections.Generic.IDictionary`2"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.Configuration.FileConfigurationProvider.EnsureLegalExtension(System.String)">
            <summary>
            检查文件拓展名有效性
            </summary>
            <param name="extension">文件拓展名</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Furion.Configuration.FileConfigurationProvider.ResolveJsonParser">
            <summary>
            解析 JSON 文件解析器
            </summary>
            <returns><see cref="T:System.Func`2"/></returns>
        </member>
        <member name="M:Furion.Configuration.FileConfigurationProvider.FileExtensionRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match '.'.<br/>
            ○ Match a character in the set [0-9A-Za-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.IConfigurationExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> 拓展类
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Exists(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            判断配置节点是否存在
            </summary>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
            <param name="key">节点路径</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get``1(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            获取配置节点并转换成指定类型
            </summary>
            <typeparam name="T">节点类型</typeparam>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
            <param name="key">节点路径</param>
            <returns><typeparamref name="T"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get``1(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            获取配置节点并转换成指定类型
            </summary>
            <typeparam name="T">节点类型</typeparam>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
            <param name="key">节点路径</param>
            <param name="configureOptions">配置值绑定到指定类型额外配置</param>
            <returns><typeparamref name="T"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Type)">
            <summary>
            获取节点配置
            </summary>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
            <param name="key">节点路径</param>
            <param name="type">节点类型</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Get(Microsoft.Extensions.Configuration.IConfiguration,System.String,System.Type,System.Action{Microsoft.Extensions.Configuration.BinderOptions})">
            <summary>
            获取节点配置
            </summary>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
            <param name="key">节点路径</param>
            <param name="type">节点类型</param>
            <param name="configureOptions">配置值绑定到指定类型额外配置</param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.IConfigurationExtensions.Reload(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            重新加载应用配置
            </summary>
            <param name="configuration"><see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/></param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FileExtensionRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the FileExtensionRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.FileExtensionRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileExtensionRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FileExtensionRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileExtensionRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.FileExtensionRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileExtensionRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileExtensionRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.FileExtensionRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiLettersAndDigits">
            <summary>Supports searching for characters in or not in "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".</summary>
        </member>
    </members>
</doc>
